### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.PivotTableCollection:class'
    summary: 'Представляет коллекцию всех объектов PivotTable, входящих в состав книги или листа.'
    name: Excel.PivotTableCollection
    fullName: Excel.PivotTableCollection
    langs:
      - typeScript
    type: class
    package: excel!
    children:
      - 'excel!Excel.PivotTableCollection#add:member(1)'
      - 'excel!Excel.PivotTableCollection#context:member'
      - 'excel!Excel.PivotTableCollection#getCount:member(1)'
      - 'excel!Excel.PivotTableCollection#getItem:member(1)'
      - 'excel!Excel.PivotTableCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.PivotTableCollection#items:member'
      - 'excel!Excel.PivotTableCollection#load:member(1)'
      - 'excel!Excel.PivotTableCollection#refreshAll:member(1)'
  - uid: 'excel!Excel.PivotTableCollection#add:member(1)'
    summary: Добавление сводной таблицы на основе указанных исходных данных и вставка ее в верхнюю левую ячейку конечного диапазона.
    name: 'add(name, source, destination)'
    fullName: 'add(name, source, destination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name: string, source: Range | string | Table, destination: Range | string): Excel.PivotTable;'
      return:
        type:
          - 'excel!Excel.PivotTable:class'
        description: |-
          Возвращает недавно вставленную сводную таблицу.

          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let rangeToAnalyze = context.workbook.worksheets.getItem("Data").getRange("A1:E21");
              let rangeToPlacePivot = context.workbook.worksheets.getItem("Pivot").getRange("A2");
              context.workbook.worksheets.getItem("Pivot").pivotTables.add("Farm Sales", rangeToAnalyze, rangeToPlacePivot);

              await context.sync();
          }
          ```
      parameters:
        - id: name
          description: Имя новой сводной таблицы.
          type:
            - string
        - id: source
          description: 'Исходные данные для новой сводной таблицы, может быть диапазоном (или строковым адресом, включая имя листа) или таблицей.'
          type:
            - 'excel!Excel.PivotTableCollection#add~0:complex'
        - id: destination
          description: 'Ячейка в левом верхнем углу диапазона назначения отчета сводной таблицы (диапазон на листе, на котором будет помещен итоговый отчет).'
          type:
            - 'excel!Excel.PivotTableCollection#add~1:complex'
  - uid: 'excel!Excel.PivotTableCollection#context:member'
    summary: 'Контекст запроса, связанный с объектом. Это подсоединяет процесс надстройки к процессу ведущего приложения Office.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.PivotTableCollection#getCount:member(1)'
    summary: Получает количество сводных таблиц в коллекции.
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.PivotTableCollection#getItem:member(1)'
    summary: Получает сводную таблицу по имени.
    name: getItem(name)
    fullName: getItem(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(name: string): Excel.PivotTable;'
      return:
        type:
          - 'excel!Excel.PivotTable:class'
        description: ''
      parameters:
        - id: name
          description: Имя получаемой сводной таблицы.
          type:
            - string
  - uid: 'excel!Excel.PivotTableCollection#getItemOrNullObject:member(1)'
    summary: 'Получает сводную таблицу по имени. Если сводная таблица не существует, возвращает пустой объект.'
    name: getItemOrNullObject(name)
    fullName: getItemOrNullObject(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(name: string): Excel.PivotTable;'
      return:
        type:
          - 'excel!Excel.PivotTable:class'
        description: ''
      parameters:
        - id: name
          description: Имя получаемой сводной таблицы.
          type:
            - string
  - uid: 'excel!Excel.PivotTableCollection#items:member'
    summary: Получает загруженные дочерние элементы в этой коллекции.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.PivotTable[];'
      return:
        type:
          - 'excel!Excel.PivotTableCollection#items~0:complex'
  - uid: 'excel!Excel.PivotTableCollection#load:member(1)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.PivotTableCollection#refreshAll:member(1)'
    summary: Обновляет все сводные таблицы в коллекции.
    name: refreshAll()
    fullName: refreshAll()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'refreshAll(): void;'
      return:
        type:
          - void
        description: ''
references:
  - uid: 'excel!Excel.PivotTable:class'
    name: PivotTable
    fullName: Excel.PivotTable
  - uid: 'excel!Excel.PivotTableCollection#add~0:complex'
    name: Range | string | Table
    fullName: Excel.Range | string | Excel.Table
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string | '
        fullName: ' | string | '
      - uid: 'excel!Excel.Table:class'
        name: Table
        fullName: Excel.Table
  - uid: 'excel!Excel.PivotTableCollection#add~1:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
    fullName: Excel.RequestContext
  - uid: 'excel!Excel.PivotTableCollection#getCount~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.PivotTableCollection#items~0:complex'
    name: 'Excel.PivotTable[]'
    fullName: 'Excel.PivotTable[]'
    spec.typeScript:
      - uid: 'excel!Excel.PivotTable:class'
        name: Excel.PivotTable
        fullName: Excel.PivotTable
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.PivotTableCollection:class'
    name: PivotTableCollection
    fullName: Excel.PivotTableCollection