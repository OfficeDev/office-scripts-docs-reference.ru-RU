### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalFormat:class'
    summary: 'Объект, инкапсулирующий диапазон, формат, правило и другие свойства условного форматирования. Чтобы узнать больше об объектной модели условного форматирования, прочтите [Применение условного форматирования к диапазонам Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting)<!-- -->.'
    name: Excel.ConditionalFormat
    fullName: Excel.ConditionalFormat
    langs:
      - typeScript
    type: class
    package: excel!
    children:
      - 'excel!Excel.ConditionalFormat#cellValue:member'
      - 'excel!Excel.ConditionalFormat#cellValueOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#colorScale:member'
      - 'excel!Excel.ConditionalFormat#colorScaleOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#context:member'
      - 'excel!Excel.ConditionalFormat#custom:member'
      - 'excel!Excel.ConditionalFormat#customOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#dataBar:member'
      - 'excel!Excel.ConditionalFormat#dataBarOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#delete:member(1)'
      - 'excel!Excel.ConditionalFormat#getRange:member(1)'
      - 'excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
      - 'excel!Excel.ConditionalFormat#getRanges:member(1)'
      - 'excel!Excel.ConditionalFormat#iconSet:member'
      - 'excel!Excel.ConditionalFormat#iconSetOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#id:member'
      - 'excel!Excel.ConditionalFormat#load:member(1)'
      - 'excel!Excel.ConditionalFormat#load:member(2)'
      - 'excel!Excel.ConditionalFormat#preset:member'
      - 'excel!Excel.ConditionalFormat#presetOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#priority:member'
      - 'excel!Excel.ConditionalFormat#set:member(1)'
      - 'excel!Excel.ConditionalFormat#stopIfTrue:member'
      - 'excel!Excel.ConditionalFormat#textComparison:member'
      - 'excel!Excel.ConditionalFormat#textComparisonOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#topBottom:member'
      - 'excel!Excel.ConditionalFormat#topBottomOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#type:member'
  - uid: 'excel!Excel.ConditionalFormat#cellValue:member'
    summary: 'Возвращает свойства условного форматирования значения ячейки, если текущим условным форматированием является тип CellValue. Например, чтобы отформатировать все ячейки от 5 до 10. Только для чтения.'
    name: cellValue
    fullName: cellValue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CellValueConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B21:E23");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#cellValueOrNullObject:member'
    summary: 'Возвращает свойства условного форматирования значения ячейки, если текущим условным форматированием является тип CellValue. Например, чтобы отформатировать все ячейки от 5 до 10. Только для чтения.'
    name: cellValueOrNullObject
    fullName: cellValueOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CellValueConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#colorScale:member'
    summary: 'Возвращает свойства условного форматирования цветовой шкалы, если текущим условным форматированием является тип цветовой шкалы. Только для чтения.'
    name: colorScale
    fullName: colorScale
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ColorScaleConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:M5");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              let criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#colorScaleOrNullObject:member'
    summary: 'Возвращает свойства условного форматирования цветовой шкалы, если текущим условным форматированием является тип цветовой шкалы. Только для чтения.'
    name: colorScaleOrNullObject
    fullName: colorScaleOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ColorScaleConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#context:member'
    summary: 'Контекст запроса, связанный с объектом. Это подсоединяет процесс надстройки к процессу ведущего приложения Office.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.ConditionalFormat#custom:member'
    summary: 'Возвращает свойства настраиваемого условного форматирования, если текущим условным форматированием является настраиваемый тип. Только для чтения.'
    name: custom
    fullName: custom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly custom: Excel.CustomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CustomConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#customOrNullObject:member'
    summary: 'Возвращает свойства настраиваемого условного форматирования, если текущим условным форматированием является настраиваемый тип. Только для чтения.'
    name: customOrNullObject
    fullName: customOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CustomConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#dataBar:member'
    summary: 'Возвращает свойства гистограммы, если текущим условным форматированием является панель данных. Только для чтения.'
    name: dataBar
    fullName: dataBar
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
      return:
        type:
          - 'excel!Excel.DataBarConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.dataBar);
              conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#dataBarOrNullObject:member'
    summary: 'Возвращает свойства гистограммы, если текущим условным форматированием является панель данных. Только для чтения.'
    name: dataBarOrNullObject
    fullName: dataBarOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
      return:
        type:
          - 'excel!Excel.DataBarConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#delete:member(1)'
    summary: Удаляет это условное форматирование.
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#getRange:member(1)'
    summary: 'Возврат диапазона, к которому применено условное форматирование. Выдает ошибку, если условное форматирование применяется к нескольким диапазонам. Только для чтения.'
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
    summary: 'Возвращает диапазон, к которому применяется формат кондитонал, или пустой объект, если условное форматирование применяется к нескольким диапазонам. Только для чтения.'
    name: getRangeOrNullObject()
    fullName: getRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#getRanges:member(1)'
    summary: 'Возвращает объект RangeAreas, состоящий из одного или нескольких прямоугольных диапазонов, к которым применено условное форматирование. Только для чтения.'
    name: getRanges()
    fullName: getRanges()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#iconSet:member'
    summary: 'Возвращает свойства условного форматирования набора значков, если текущим условным форматированием является тип набора значков. Только для чтения.'
    name: iconSet
    fullName: iconSet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              let iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#iconSetOrNullObject:member'
    summary: 'Возвращает свойства условного форматирования набора значков, если текущим условным форматированием является тип набора значков. Только для чтения.'
    name: iconSetOrNullObject
    fullName: iconSetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#id:member'
    summary: Приоритет условного форматирования в пределах текущего класса ConditionalFormatCollection. Только для чтения.
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.ConditionalFormat#load:member(1)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.ConditionalFormat#load:member(2)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.ConditionalFormat;
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`— Это строка с разделителями-запятыми, задающая свойства для `propertyNamesAndPaths.expand` загрузки и которая представляет собой строку с разделителями-запятыми, указывающую свойства навигации для загрузки.'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.ConditionalFormat#preset:member'
    summary: Возвращает условное форматирование предварительно установленных условий. Дополнительные сведения см. в статье Excel. Пресеткритериакондитионалформат.
    name: preset
    fullName: preset
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - 'excel!Excel.PresetCriteriaConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:M5");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.presetCriteria);
              conditionalFormat.preset.format.font.color = "white";
              conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#presetOrNullObject:member'
    summary: Возвращает условное форматирование предварительно установленных условий. Дополнительные сведения см. в статье Excel. Пресеткритериакондитионалформат.
    name: presetOrNullObject
    fullName: presetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - 'excel!Excel.PresetCriteriaConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#priority:member'
    summary: 'Приоритет (или индекс) в коллекции условных форматов, в которой в настоящее время существует данное условное форматирование. При этом также изменяются приоритеты других условных форматов для обеспечения непрерывного порядка приоритетов. Используйте отрицательный приоритет, чтобы начать с обратного. Приоритеты, превышающие пределы, будут получены и установлены в максимальном (или минимальном, при отрицательном) приоритете. Обратите внимание, что при изменении приоритета необходимо повторно получить новую копию объекта в новом расположении приоритета, если вы хотите внести в него другие изменения. Только для чтения.'
    name: priority
    fullName: priority
    langs:
      - typeScript
    type: property
    syntax:
      content: 'priority: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.ConditionalFormat#set:member(1)'
    summary: Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.ConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.ConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#stopIfTrue:member'
    summary: 'Если выполняются условия этого условного форматирования, форматы с более низким приоритетом не будут применяться в этой ячейке. NULL в данных, наборах значков и колорскалес, так как для них отсутствует концепция StopIfTrue'
    name: stopIfTrue
    fullName: stopIfTrue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.ConditionalFormat#textComparison:member'
    summary: 'Возвращает определенные свойства условного форматирования текста, если текущим условным форматированием является текстовый тип. Например, чтобы форматировать ячейки, которые соответствуют слову "Text". Только для чтения.'
    name: textComparison
    fullName: textComparison
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparison: Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B16:D18");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#textComparisonOrNullObject:member'
    summary: 'Возвращает определенные свойства условного форматирования текста, если текущим условным форматированием является текстовый тип. Например, чтобы форматировать ячейки, которые соответствуют слову "Text". Только для чтения.'
    name: textComparisonOrNullObject
    fullName: textComparisonOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#topBottom:member'
    summary: 'Возвращает верхнее и нижнее свойства условного форматирования, если текущее условное форматирование имеет тип TopBottom. Например, чтобы отформатировать первые 10% или 10 последних элементов. Только для чтения.'
    name: topBottom
    fullName: topBottom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TopBottomConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#topBottomOrNullObject:member'
    summary: 'Возвращает верхнее и нижнее свойства условного форматирования, если текущее условное форматирование имеет тип TopBottom. Например, чтобы отформатировать первые 10% или 10 последних элементов. Только для чтения.'
    name: topBottomOrNullObject
    fullName: topBottomOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TopBottomConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#type:member'
    summary: Тип условного форматирования. В каждый момент времени можно задать только один из них. Только для чтения.
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
      return:
        type:
          - 'excel!Excel.ConditionalFormat#type~0:complex'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          }
          ```
references:
  - uid: 'excel!Excel.CellValueConditionalFormat:class'
    name: CellValueConditionalFormat
    fullName: Excel.CellValueConditionalFormat
  - uid: 'excel!Excel.ColorScaleConditionalFormat:class'
    name: ColorScaleConditionalFormat
    fullName: Excel.ColorScaleConditionalFormat
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
    fullName: Excel.RequestContext
  - uid: 'excel!Excel.CustomConditionalFormat:class'
    name: CustomConditionalFormat
    fullName: Excel.CustomConditionalFormat
  - uid: 'excel!Excel.DataBarConditionalFormat:class'
    name: DataBarConditionalFormat
    fullName: Excel.DataBarConditionalFormat
  - uid: 'excel!Excel.Range:class'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.RangeAreas:class'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.IconSetConditionalFormat:class'
    name: IconSetConditionalFormat
    fullName: Excel.IconSetConditionalFormat
  - uid: 'excel!Excel.ConditionalFormat:class'
    name: ConditionalFormat
    fullName: Excel.ConditionalFormat
  - uid: 'excel!Excel.PresetCriteriaConditionalFormat:class'
    name: PresetCriteriaConditionalFormat
    fullName: Excel.PresetCriteriaConditionalFormat
  - uid: 'excel!Excel.TextConditionalFormat:class'
    name: TextConditionalFormat
    fullName: Excel.TextConditionalFormat
  - uid: 'excel!Excel.TopBottomConditionalFormat:class'
    name: TopBottomConditionalFormat
    fullName: Excel.TopBottomConditionalFormat
  - uid: 'excel!Excel.ConditionalFormat#type~0:complex'
    name: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
    fullName: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
    spec.typeScript:
      - uid: 'excel!Excel.ConditionalFormatType:enum'
        name: Excel.ConditionalFormatType
        fullName: Excel.ConditionalFormatType
      - name: ' | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'
        fullName: ' | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'