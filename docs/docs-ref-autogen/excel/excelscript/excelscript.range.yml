### YamlMime:TSType
name: ExcelScript.Range
uid: 'ExcelScript!ExcelScript.Range:interface'
package: ExcelScript!
fullName: ExcelScript.Range
summary: 'Объект Range представляет собой набор из одной или нескольких смежных ячеек, например ячейку, строку, столбец, блок ячеек и т. д.'
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: addConditionalFormat(type)
    uid: 'ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)'
    package: ExcelScript!
    fullName: addConditionalFormat(type)
    summary: Добавляет новый условный формат в коллекцию с первого и верхнего приоритета.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
      parameters:
        - id: type
          description: Тип добавляемого условного формата. Подробные `ExcelScript.ConditionalFormatType` сведения см. в материале.
          type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormatType:enum" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />'
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /**
           * This sample applies conditional formatting to the currently used range in the worksheet. 
           * The conditional formatting is a green fill for the top 10% of values.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the used range in the worksheet.
            let range = selectedSheet.getUsedRange();

            // Set the fill color to green for the top 10% of values in the range.
            let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)
            conditionalFormat.getTopBottom().getFormat().getFill().setColor("green");
            conditionalFormat.getTopBottom().setRule({
              rank: 10, // The percentage threshold.
              type: ExcelScript.ConditionalTopBottomCriterionType.topPercent // The type of the top/bottom condition.
            });
          }
          ```
  - name: 'autoFill(destinationRange, autoFillType)'
    uid: 'ExcelScript!ExcelScript.Range#autoFill:member(1)'
    package: ExcelScript!
    fullName: 'autoFill(destinationRange, autoFillType)'
    summary: 'Заполняет диапазон от текущего диапазона до диапазона назначения с помощью указанной логики AutoFill. Диапазон назначения может быть `null`<!-- -->, или может расширить источник горизонтально или вертикально. Дисконтные диапазоны не поддерживаются.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        autoFill(
                    destinationRange?: Range | string,
                    autoFillType?: AutoFillType
                ): void;
      parameters:
        - id: destinationRange
          description: 'Диапазон назначения для AutoFill. Если диапазон назначения `null`<!-- -->, данные заполняются на основе окружающих ячеек (это поведение при двойном нажатии ручки заполнения диапазона пользовательского интерфейса).'
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
        - id: autoFillType
          description: 'Тип AutoFill. Указывает, как должен быть заполнен диапазон назначения в зависимости от содержимого текущего диапазона. По умолчанию это "FillDefault".'
          type: '<xref uid="ExcelScript!ExcelScript.AutoFillType:enum" />'
      return:
        type: void
        description: ''
  - name: calculate()
    uid: 'ExcelScript!ExcelScript.Range#calculate:member(1)'
    package: ExcelScript!
    fullName: calculate()
    summary: Вычисляет диапазон ячеек на листе.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculate(): void;'
      return:
        type: void
        description: ''
  - name: clear(applyTo)
    uid: 'ExcelScript!ExcelScript.Range#clear:member(1)'
    package: ExcelScript!
    fullName: clear(applyTo)
    summary: 'Очищает значения, формат, заливку, границу диапазона и т. д.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(applyTo?: ClearApplyTo): void;'
      parameters:
        - id: applyTo
          description: Необязательный параметр. Определяет тип действия очистки. Подробные `ExcelScript.ClearApplyTo` сведения см. в материале.
          type: '<xref uid="ExcelScript!ExcelScript.ClearApplyTo:enum" />'
      return:
        type: void
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /**
           * This script removes all the formatting from the selected range.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the selected range.
            let range = workbook.getSelectedRange();

            // Clear all the formatting in that range.
            range.clear(ExcelScript.ClearApplyTo.formats);
          }
          ```
  - name: clearAllConditionalFormats()
    uid: 'ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)'
    package: ExcelScript!
    fullName: clearAllConditionalFormats()
    summary: Полное удаление условного форматирование в указанном диапазоне.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clearAllConditionalFormats(): void;'
      return:
        type: void
        description: ''
  - name: convertDataTypeToText()
    uid: 'ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)'
    package: ExcelScript!
    fullName: convertDataTypeToText()
    summary: Преобразует ячейки диапазона с типами данных в текст.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type: void
        description: ''
  - name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    uid: 'ExcelScript!ExcelScript.Range#copyFrom:member(1)'
    package: ExcelScript!
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    summary: 'Копирует данные ячейки или форматирование из диапазона исходных данных или `RangeAreas` текущего диапазона. Диапазон назначения может быть иным размером, чем исходный диапазон или `RangeAreas`<!-- -->. Назначение будет расширяться автоматически, если оно меньше источника.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?: RangeCopyType,
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      parameters:
        - id: sourceRange
          description: 'Диапазон источника или `RangeAreas` копирование. Если источник имеет несколько диапазонов, их форму необходимо создать путем удаления полных рядов или столбцов `RangeAreas` из прямоугольного диапазона.'
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" /> | string'
        - id: copyType
          description: Тип данных ячейки или форматирование для копирования. По умолчанию это "Все".
          type: '<xref uid="ExcelScript!ExcelScript.RangeCopyType:enum" />'
        - id: skipBlanks
          description: 'True, если пропустить пустые ячейки в диапазоне исходных источников. Значение по умолчанию: false.'
          type: boolean
        - id: transpose
          description: 'True, если перенаправление ячеек в диапазоне назначения. Значение по умолчанию: false.'
          type: boolean
      return:
        type: void
        description: ''
  - name: delete(shift)
    uid: 'ExcelScript!ExcelScript.Range#delete:member(1)'
    package: ExcelScript!
    fullName: delete(shift)
    summary: 'Удаляет ячейки, связанные с диапазоном.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(shift: DeleteShiftDirection): void;'
      parameters:
        - id: shift
          description: Определяет способ сдвига ячеек. Подробные `ExcelScript.DeleteShiftDirection` сведения см. в материале.
          type: '<xref uid="ExcelScript!ExcelScript.DeleteShiftDirection:enum" />'
      return:
        type: void
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /**
           * This sample creates a sample range, then deletes
           * "A1" using different DeleteShiftDirection values.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Add sample data to better visualize the delete changes.
            const currentSheet = workbook.getActiveWorksheet();
            currentSheet.getRange("A1:D4").setValues([
              [1,2,3,4],
              [5,6,7,8],
              [9,10,11,12],
              [13,14,15,16]]);

            // Delete A1 and shift the cells from the right to fill the space.
            // The value being deleted is 1.
            currentSheet.getRange("A1").delete(ExcelScript.DeleteShiftDirection.left);

            // Delete A1 and shift the cells from the bottom to fill the space.
            // The value being deleted is 2.
            currentSheet.getRange("A1").delete(ExcelScript.DeleteShiftDirection.up);

            // Log the sample range. The values should be:
            /*
              5, 3, 4, "",
              9, 6, 7, 8,
              13, 10, 11, 12,
              "", 14, 15, 16
            */
            console.log(currentSheet.getRange("A1:D4").getValues()); 
          }
          ```
  - name: 'find(text, criteria)'
    uid: 'ExcelScript!ExcelScript.Range#find:member(1)'
    package: ExcelScript!
    fullName: 'find(text, criteria)'
    summary: 'Находит определенную строку на основе указанных условий. Если текущий диапазон больше одной ячейки, поиск будет ограничен этим диапазоном, иначе поиск будет охватывать весь лист, начиная с этой ячейки. Если совпадений нет, эта функция возвращает объект с его `isNullObject` свойством `true`<!-- -->.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'find(text: string, criteria: SearchCriteria): Range;'
      parameters:
        - id: text
          description: Строка для поиска.
          type: string
        - id: criteria
          description: 'Дополнительные критерии поиска, включая направление поиска и соответствие поиска всей ячейке или учет учетных данных.'
          type: '<xref uid="ExcelScript!ExcelScript.SearchCriteria:interface" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: flashFill()
    uid: 'ExcelScript!ExcelScript.Range#flashFill:member(1)'
    package: ExcelScript!
    fullName: flashFill()
    summary: 'Делает флэш-заполнение для текущего диапазона. Flash Fill автоматически заполняет данные, когда он чувствует шаблон, поэтому диапазон должен быть одним диапазоном столбцов и иметь данные вокруг него, чтобы найти шаблон.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'flashFill(): void;'
      return:
        type: void
        description: ''
  - name: 'getAbsoluteResizedRange(numRows, numColumns)'
    uid: 'ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)'
    package: ExcelScript!
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    summary: 'Получает объект с той же верхней левой ячейкой, что и текущий объект, но с указанным числом `Range` `Range` строк и столбцов.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
      parameters:
        - id: numRows
          description: Количество строк нового размера диапазона.
          type: number
        - id: numColumns
          description: Количество столбцов нового размера диапазона.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getAddress()
    uid: 'ExcelScript!ExcelScript.Range#getAddress:member(1)'
    package: ExcelScript!
    fullName: getAddress()
    summary: 'Указывает ссылку диапазона в стиле A1. Значение адреса содержит ссылку на лист (например, "Sheet1! A1:B4").'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAddress(): string;'
      return:
        type: string
        description: ''
  - name: getAddressLocal()
    uid: 'ExcelScript!ExcelScript.Range#getAddressLocal:member(1)'
    package: ExcelScript!
    fullName: getAddressLocal()
    summary: Представляет ссылку диапазона для указанного диапазона на языке пользователя.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAddressLocal(): string;'
      return:
        type: string
        description: ''
  - name: getBoundingRect(anotherRange)
    uid: 'ExcelScript!ExcelScript.Range#getBoundingRect:member(1)'
    package: ExcelScript!
    fullName: getBoundingRect(anotherRange)
    summary: 'Возвращает наименьший объект диапазона, включающий в себя заданные диапазоны. Например, `GetBoundingRect` "B2:C5" и "D10:E15" — это "B2:E15".'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Range;'
      parameters:
        - id: anotherRange
          description: 'Имя объекта диапазона, адреса или диапазона.'
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: 'getCell(row, column)'
    uid: 'ExcelScript!ExcelScript.Range#getCell:member(1)'
    package: ExcelScript!
    fullName: 'getCell(row, column)'
    summary: 'Получает объект диапазона, содержащий одну ячейку, по номеру строки и столбца. Ячейка может находиться за пределами родительского диапазона, если она находится в сетке таблицы. Возвращаемая ячейка располагается относительно верхней левой ячейки диапазона.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      parameters:
        - id: row
          description: 'Номер строки ячейки, которую требуется извлечь. Используется нулевой индекс.'
          type: number
        - id: column
          description: 'Номер столбца ячейки, которую требуется извлечь. Используется нулевой индекс.'
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getCellCount()
    uid: 'ExcelScript!ExcelScript.Range#getCellCount:member(1)'
    package: ExcelScript!
    fullName: getCellCount()
    summary: 'Указывает количество ячеек в диапазоне. Этот API возвращает значение -1, если количество ячеек превышает 2^31-1 (2,147,483,647).'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCellCount(): number;'
      return:
        type: number
        description: ''
  - name: getColumn(column)
    uid: 'ExcelScript!ExcelScript.Range#getColumn:member(1)'
    package: ExcelScript!
    fullName: getColumn(column)
    summary: Возвращает столбец в диапазоне.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumn(column: number): Range;'
      parameters:
        - id: column
          description: 'Номер столбца диапазона, который требуется извлечь. Используется нулевой индекс.'
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getColumnCount()
    uid: 'ExcelScript!ExcelScript.Range#getColumnCount:member(1)'
    package: ExcelScript!
    fullName: getColumnCount()
    summary: Указывает общее количество столбцов в диапазоне.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnCount(): number;'
      return:
        type: number
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - name: getColumnHidden()
    uid: 'ExcelScript!ExcelScript.Range#getColumnHidden:member(1)'
    package: ExcelScript!
    fullName: getColumnHidden()
    summary: 'Представляет, скрыты ли все столбцы текущего диапазона. Значение — `true` это когда все столбцы в диапазоне скрыты. Значение — `false` это когда столбцы в диапазоне не скрыты. Значение — когда некоторые столбцы в диапазоне скрыты, а другие столбцы в том `null` же диапазоне не скрыты.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnHidden(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getColumnIndex()
    uid: 'ExcelScript!ExcelScript.Range#getColumnIndex:member(1)'
    package: ExcelScript!
    fullName: getColumnIndex()
    summary: Указывает номер столбца первой ячейки в диапазоне. Используется нулевой индекс.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnIndex(): number;'
      return:
        type: number
        description: ''
  - name: getColumnsAfter(count)
    uid: 'ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)'
    package: ExcelScript!
    fullName: getColumnsAfter(count)
    summary: Получает определенное количество столбцов справа от текущего `Range` объекта.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnsAfter(count?: number): Range;'
      parameters:
        - id: count
          description: 'Необязательный. Количество столбцов, включаемых в полученный диапазон. Чтобы создать диапазон за пределами текущего диапазона, используйте положительное число. Вы также можете использовать отрицательное число, чтобы создать диапазон в рамках текущего диапазона. Значение по умолчанию — 1.'
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getColumnsBefore(count)
    uid: 'ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)'
    package: ExcelScript!
    fullName: getColumnsBefore(count)
    summary: Получает определенное количество столбцов слева от текущего `Range` объекта.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnsBefore(count?: number): Range;'
      parameters:
        - id: count
          description: 'Необязательный. Количество столбцов, включаемых в полученный диапазон. Чтобы создать диапазон за пределами текущего диапазона, используйте положительное число. Вы также можете использовать отрицательное число, чтобы создать диапазон в рамках текущего диапазона. Значение по умолчанию — 1.'
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getConditionalFormat(id)
    uid: 'ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)'
    package: ExcelScript!
    fullName: getConditionalFormat(id)
    summary: Возвращает условное форматирование для указанного идентификатора.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getConditionalFormat(id: string): ConditionalFormat;'
      parameters:
        - id: id
          description: ID условного формата.
          type: string
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />'
        description: ''
  - name: getConditionalFormats()
    uid: 'ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)'
    package: ExcelScript!
    fullName: getConditionalFormats()
    summary: Эта коллекция `ConditionalFormats` пересекает диапазон.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getConditionalFormats(): ConditionalFormat[];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />[]'
        description: ''
  - name: getDataValidation()
    uid: 'ExcelScript!ExcelScript.Range#getDataValidation:member(1)'
    package: ExcelScript!
    fullName: getDataValidation()
    summary: Возвращает объект проверки данных.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDataValidation(): DataValidation;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.DataValidation:interface" />'
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /**
           * This script creates a drop-down selection list for a cell. It uses the existing values of the selected range as the choices for the list.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the values for data validation.
            let selectedRange = workbook.getSelectedRange();
            let rangeValues = selectedRange.getValues();

            // Convert the values into a comma-delimited string.
            let dataValidationListString = "";
            rangeValues.forEach((rangeValueRow) => {
              rangeValueRow.forEach((value) => {
                dataValidationListString += value + ",";
              });
            });

            // Clear the old range.
            selectedRange.clear(ExcelScript.ClearApplyTo.contents);

            // Apply the data validation to the first cell in the selected range.
            let targetCell = selectedRange.getCell(0,0);
            let dataValidation = targetCell.getDataValidation();

            // Set the content of the drop-down list.
            dataValidation.setRule({
                list: {
                  inCellDropDown: true,
                  source: dataValidationListString
                }
              });
          }
          ```
  - name: getDirectPrecedents()
    uid: 'ExcelScript!ExcelScript.Range#getDirectPrecedents:member(1)'
    package: ExcelScript!
    fullName: getDirectPrecedents()
    summary: 'Возвращает объект, представляющего диапазон, содержащий все прямые прецеденты ячейки в одной и той же таблице или `WorkbookRangeAreas` в нескольких таблицах.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDirectPrecedents(): WorkbookRangeAreas;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.WorkbookRangeAreas:interface" />'
        description: ''
  - name: getEntireColumn()
    uid: 'ExcelScript!ExcelScript.Range#getEntireColumn:member(1)'
    package: ExcelScript!
    fullName: getEntireColumn()
    summary: 'Получает объект, который представляет весь столбец диапазона (например, если текущий диапазон представляет ячейки "B4:E11", он представляет столбцы `getEntireColumn` "B:E").'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireColumn(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getEntireRow()
    uid: 'ExcelScript!ExcelScript.Range#getEntireRow:member(1)'
    package: ExcelScript!
    fullName: getEntireRow()
    summary: 'Получает объект, который представляет весь ряд диапазона (например, если текущий диапазон представляет ячейки "B4:E11", это диапазон, который представляет строки `GetEntireRow` "4:11").'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireRow(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: 'getExtendedRange(direction, activeCell)'
    uid: 'ExcelScript!ExcelScript.Range#getExtendedRange:member(1)'
    package: ExcelScript!
    fullName: 'getExtendedRange(direction, activeCell)'
    summary: 'Возвращает объект диапазона, который включает текущий диапазон и до края диапазона, в зависимости от предоставленного направления. Это соответствует поведению ключа Ctrl+Shift+Arrow в Excel Windows пользовательского интерфейса.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getExtendedRange(
                    direction: KeyboardDirection,
                    activeCell?: Range | string
                ): Range;
      parameters:
        - id: direction
          description: Направление от активной ячейки.
          type: '<xref uid="ExcelScript!ExcelScript.KeyboardDirection:enum" />'
        - id: activeCell
          description: 'Активная ячейка в этом диапазоне. По умолчанию активная ячейка является верхней левой ячейкой диапазона. Ошибка выброшена, если активная ячейка не находится в этом диапазоне.'
          type: |-
            <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
                    
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getFormat()
    uid: 'ExcelScript!ExcelScript.Range#getFormat:member(1)'
    package: ExcelScript!
    fullName: getFormat()
    summary: 'Возвращает объект формата, в который включены шрифт, заливка, границы, выравнивание и другие свойства диапазона.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormat(): RangeFormat;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeFormat:interface" />'
        description: ''
  - name: getFormula()
    uid: 'ExcelScript!ExcelScript.Range#getFormula:member(1)'
    package: ExcelScript!
    fullName: getFormula()
    summary: 'Представляет формулу ячейки в нотации в стиле A1. Если диапазон содержит несколько ячеек, возвращаются данные из первой ячейки (представленные индексом строки 0 и индексом столбца 0).'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormula(): string;'
      return:
        type: string
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /*
           * This script sets a cell's formula, 
           * then displays how Excel stores the cell's formula and value separately.
           */
          function main(workbook: ExcelScript.Workbook) {
            let selectedSheet = workbook.getActiveWorksheet();

            // Set A1 to 2.
            let a1 = selectedSheet.getRange("A1");
            a1.setValue(2);

            // Set B1 to the formula =(2*A1), which should equal 4.
            let b1 = selectedSheet.getRange("B1")
            b1.setFormula("=(2*A1)");

            // Log the current results for `getFormula` and `getValue` at B1.
            console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);
          }
          ```
  - name: getFormulaLocal()
    uid: 'ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)'
    package: ExcelScript!
    fullName: getFormulaLocal()
    summary: 'Представляет формулу ячейки в нотации в стиле A1 на языке пользователя и языковом формате номеров. Например, английская формула =SUM(A1, 1.5) превратится в "=СУММ(A1; 1,5)" на русском языке. Если диапазон содержит несколько ячеек, возвращаются данные из первой ячейки (представленные индексом строки 0 и индексом столбца 0).'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulaLocal(): string;'
      return:
        type: string
        description: ''
  - name: getFormulaR1C1()
    uid: 'ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)'
    package: ExcelScript!
    fullName: getFormulaR1C1()
    summary: 'Представляет формулу ячейки в нотации в стиле R1C1. Если диапазон содержит несколько ячеек, возвращаются данные из первой ячейки (представленные индексом строки 0 и индексом столбца 0).'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulaR1C1(): string;'
      return:
        type: string
        description: ''
  - name: getFormulas()
    uid: 'ExcelScript!ExcelScript.Range#getFormulas:member(1)'
    package: ExcelScript!
    fullName: getFormulas()
    summary: 'Представляет формулу в формате A1. Если ячейка не имеет формулы, вместо нее возвращается ее значение.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulas(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getFormulasLocal()
    uid: 'ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)'
    package: ExcelScript!
    fullName: getFormulasLocal()
    summary: 'Представляет формулу в нотации стиля A1 на языке пользователя и в соответствии с его языковым стандартом. Например, английская формула =SUM(A1, 1.5) превратится в "=СУММ(A1; 1,5)" на русском языке. Если ячейка не имеет формулы, вместо нее возвращается ее значение.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulasLocal(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getFormulasR1C1()
    uid: 'ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)'
    package: ExcelScript!
    fullName: getFormulasR1C1()
    summary: 'Представляет формулу в формате R1C1. Если ячейка не имеет формулы, вместо нее возвращается ее значение.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulasR1C1(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getHasSpill()
    uid: 'ExcelScript!ExcelScript.Range#getHasSpill:member(1)'
    package: ExcelScript!
    fullName: getHasSpill()
    summary: 'Указывает, есть ли во всех ячейках граница переноса. Возвращается, если у всех ячеек есть граница разлива или если у всех ячеек нет границы `true` `false` разлива. Возвращается, если в диапазоне есть ячейки как с границами разлива, так и без `null` них.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHasSpill(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getHeight()
    uid: 'ExcelScript!ExcelScript.Range#getHeight:member(1)'
    package: ExcelScript!
    fullName: getHeight()
    summary: Возвращает расстояние в точках для 100% масштабирования от верхнего края диапазона до нижнего края диапазона.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHeight(): number;'
      return:
        type: number
        description: ''
  - name: getHidden()
    uid: 'ExcelScript!ExcelScript.Range#getHidden:member(1)'
    package: ExcelScript!
    fullName: getHidden()
    summary: 'Представляет, скрыты ли все ячейки текущего диапазона. Значение — `true` это когда все ячейки в диапазоне скрыты. Значение — `false` это когда ячейки в диапазоне не скрыты. Значение — когда некоторые ячейки в диапазоне скрыты, а другие ячейки в том же диапазоне `null` не скрыты.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHidden(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getHyperlink()
    uid: 'ExcelScript!ExcelScript.Range#getHyperlink:member(1)'
    package: ExcelScript!
    fullName: getHyperlink()
    summary: Представляет гиперссылку для текущего диапазона.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHyperlink(): RangeHyperlink;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeHyperlink:interface" />'
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /**
           * This sample clears all of the hyperlinks from the current worksheet
           * and removes the usual hyperlink formatting.
           */
          function main(workbook: ExcelScript.Workbook, sheetName: string = 'Sheet1') {
            // Get the active worksheet. 
            let sheet = workbook.getWorksheet(sheetName);

            // Get the used range to operate on.
            // For large ranges (over 10000 entries), consider splitting the operation into batches for performance.
            const targetRange = sheet.getUsedRange(true);
            console.log(`Target Range to clear hyperlinks from: ${targetRange.getAddress()}`);

            const rowCount = targetRange.getRowCount();
            const colCount = targetRange.getColumnCount();
            console.log(`Searching for hyperlinks in ${targetRange.getAddress()} which contains ${(rowCount * colCount)} cells`);

            // Go through each individual cell looking for a hyperlink. 
            // This allows us to limit the formatting changes to only the cells with hyperlink formatting.
            let clearedCount = 0;
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < colCount; j++) {
                const cell = targetRange.getCell(i, j);
                const hyperlink = cell.getHyperlink();
                if (hyperlink) {
                  cell.clear(ExcelScript.ClearApplyTo.hyperlinks);
                  cell.getFormat().getFont().setUnderline(ExcelScript.RangeUnderlineStyle.none);
                  cell.getFormat().getFont().setColor('Black');
                  clearedCount++;
                }
              }
            }

            console.log(`Done. Cleared hyperlinks from ${clearedCount} cells`);
          }
          ```
  - name: getImage()
    uid: 'ExcelScript!ExcelScript.Range#getImage:member(1)'
    package: ExcelScript!
    fullName: getImage()
    summary: Отрисовка диапазона в качестве изображения png с кодом base64.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getImage(): string;'
      return:
        type: string
        description: ''
  - name: getIntersection(anotherRange)
    uid: 'ExcelScript!ExcelScript.Range#getIntersection:member(1)'
    package: ExcelScript!
    fullName: getIntersection(anotherRange)
    summary: 'Возвращает объект диапазона, представляющий прямоугольное пересечение заданных диапазонов. Если пересечение не обнаружено, эта функция возвращает объект с его `isNullObject` свойством `true`<!-- -->.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Range;'
      parameters:
        - id: anotherRange
          description: 'Объект диапазона или адрес диапазона, который будет использоваться для определения пересечения диапазонов.'
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getIsEntireColumn()
    uid: 'ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)'
    package: ExcelScript!
    fullName: getIsEntireColumn()
    summary: 'Указывает, является ли текущий диапазон целым столбцом.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIsEntireColumn(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getIsEntireRow()
    uid: 'ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)'
    package: ExcelScript!
    fullName: getIsEntireRow()
    summary: 'Указывает, является ли текущий диапазон целой строкой.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIsEntireRow(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getLastCell()
    uid: 'ExcelScript!ExcelScript.Range#getLastCell:member(1)'
    package: ExcelScript!
    fullName: getLastCell()
    summary: 'Возвращает последнюю ячейку в диапазоне. Например, последняя ячейка диапазона B2:D5 — D5.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastCell(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getLastColumn()
    uid: 'ExcelScript!ExcelScript.Range#getLastColumn:member(1)'
    package: ExcelScript!
    fullName: getLastColumn()
    summary: 'Возвращает последний столбец в диапазоне. Например, последний столбец диапазона B2:D5 — D2:D5.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastColumn(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getLastRow()
    uid: 'ExcelScript!ExcelScript.Range#getLastRow:member(1)'
    package: ExcelScript!
    fullName: getLastRow()
    summary: 'Возвращает последнюю строку в диапазоне. Например, последняя строка в диапазоне "B2:D5" — "B5:D5".'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastRow(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getLeft()
    uid: 'ExcelScript!ExcelScript.Range#getLeft:member(1)'
    package: ExcelScript!
    fullName: getLeft()
    summary: Возвращает расстояние в точках для 100% масштабирования от левого края таблицы до левого края диапазона.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLeft(): number;'
      return:
        type: number
        description: ''
  - name: getLinkedDataTypeState()
    uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)'
    package: ExcelScript!
    fullName: getLinkedDataTypeState()
    summary: Представляет состояние типа данных ячейки.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLinkedDataTypeState(): LinkedDataTypeState;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.LinkedDataTypeState:enum" />'
        description: ''
  - name: getLinkedDataTypeStates()
    uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)'
    package: ExcelScript!
    fullName: getLinkedDataTypeStates()
    summary: Представляет состояние типа данных каждой ячейки.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLinkedDataTypeStates(): LinkedDataTypeState[][];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.LinkedDataTypeState:enum" />[][]'
        description: ''
  - name: getMergedAreas()
    uid: 'ExcelScript!ExcelScript.Range#getMergedAreas:member(1)'
    package: ExcelScript!
    fullName: getMergedAreas()
    summary: 'Возвращает объект RangeAreas, который представляет объединенные области в этом диапазоне. Обратите внимание, что если количество объединенных областей в этом диапазоне превышает 512, API не сможет вернуть результат. Если RangeAreas не существует, возвращается объект null.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getMergedAreas(): RangeAreas;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />'
        description: ''
  - name: getNumberFormat()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormat:member(1)'
    package: ExcelScript!
    fullName: getNumberFormat()
    summary: 'Представляет код формата Excel числа для данного диапазона. Если диапазон содержит несколько ячеек, возвращаются данные из первой ячейки (представленные индексом строки 0 и индексом столбца 0).'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormat(): string;'
      return:
        type: string
        description: ''
  - name: getNumberFormatCategories()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormatCategories:member(1)'
    package: ExcelScript!
    fullName: getNumberFormatCategories()
    summary: Представляет категорию формата номеров каждой ячейки.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormatCategories(): NumberFormatCategory[][];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.NumberFormatCategory:enum" />[][]'
        description: ''
  - name: getNumberFormatCategory()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormatCategory:member(1)'
    package: ExcelScript!
    fullName: getNumberFormatCategory()
    summary: Указывает категорию формата номеров первой ячейки в диапазоне (представлена индексом строки 0 и индексом столбца 0).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormatCategory(): NumberFormatCategory;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.NumberFormatCategory:enum" />'
        description: ''
  - name: getNumberFormatLocal()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)'
    package: ExcelScript!
    fullName: getNumberFormatLocal()
    summary: 'Представляет код формата Excel номера для данного диапазона в зависимости от языковых параметров пользователя. Excel не выполняет принуждение языка или формата при получении или настройке `numberFormatLocal` свойства. Любой возвращенный текст использует локально отформатированные строки на основе языка, указанного в параметрах системы. Если диапазон содержит несколько ячеек, возвращаются данные из первой ячейки (представленные индексом строки 0 и индексом столбца 0).'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormatLocal(): string;'
      return:
        type: string
        description: ''
  - name: getNumberFormats()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormats:member(1)'
    package: ExcelScript!
    fullName: getNumberFormats()
    summary: Представляет Excel формата номеров для данного диапазона.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormats(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getNumberFormatsLocal()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)'
    package: ExcelScript!
    fullName: getNumberFormatsLocal()
    summary: 'Представляет Excel формата номера для данного диапазона в зависимости от языковых параметров пользователя. Excel не выполняет принуждение языка или формата при получении или настройке `numberFormatLocal` свойства. Любой возвращенный текст использует локально отформатированные строки на основе языка, указанного в параметрах системы.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormatsLocal(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: 'getOffsetRange(rowOffset, columnOffset)'
    uid: 'ExcelScript!ExcelScript.Range#getOffsetRange:member(1)'
    package: ExcelScript!
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    summary: 'Возвращает объект, представляющий диапазон, который смещен от указанного диапазона. Измерение возвращаемого диапазона будет соответствовать этому диапазону. Если результирующий диапазон выходит за пределы таблицы листа, возникнет ошибка.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
      parameters:
        - id: rowOffset
          description: 'Количество строк (положительное, отрицательное или нулевое), на которое необходимо сместить диапазон. Положительные значения соответствуют смещению вниз, а отрицательные — вверх.'
          type: number
        - id: columnOffset
          description: 'Количество столбцов (положительное, отрицательное или 0), на который нужно сместить диапазон. Положительные значения соответствуют смещению вправо, а отрицательные — влево.'
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /**
           * This script gets adjacent cells using relative references.
           * Note that if the active cell is on the top row, part of the script fails, 
           * because it references the cell above the currently selected one.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the currently active cell in the workbook.
            let activeCell = workbook.getActiveCell();
            console.log(`The active cell's address is: ${activeCell.getAddress()}`);

            // Get the cell to the right of the active cell and set its value and color.
            let rightCell = activeCell.getOffsetRange(0,1);
            rightCell.setValue("Right cell");
            console.log(`The right cell's address is: ${rightCell.getAddress()}`);
            rightCell.getFormat().getFont().setColor("Magenta");
            rightCell.getFormat().getFill().setColor("Cyan");

            // Get the cell to the above of the active cell and set its value and color.
            // Note that this operation will fail if the active cell is in the top row.
            let aboveCell = activeCell.getOffsetRange(-1, 0);
            aboveCell.setValue("Above cell");
            console.log(`The above cell's address is: ${aboveCell.getAddress()}`);
            aboveCell.getFormat().getFont().setColor("White");
            aboveCell.getFormat().getFill().setColor("Black");
          }
          ```
  - name: getPivotTables(fullyContained)
    uid: 'ExcelScript!ExcelScript.Range#getPivotTables:member(1)'
    package: ExcelScript!
    fullName: getPivotTables(fullyContained)
    summary: 'Получает объемную коллекцию pivotTables, которые пересекаются с диапазоном.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPivotTables(fullyContained?: boolean): PivotTable[];'
      parameters:
        - id: fullyContained
          description: 'Если `true`<!-- -->возвращает только pivotTables, которые полностью содержатся в пределах диапазона. Значение по умолчанию `false`<!-- -->.'
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.PivotTable:interface" />[]'
        description: ''
  - name: getPredefinedCellStyle()
    uid: 'ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)'
    package: ExcelScript!
    fullName: getPredefinedCellStyle()
    summary: 'Представляет стиль текущего диапазона. Если стили ячеек несовместимы, `null` они будут возвращены. Для пользовательских стилей будет возвращено имя стиля. Для встроенных стилей будет возвращена строка, представляющая значение в `BuiltInStyle` enum.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPredefinedCellStyle(): string;'
      return:
        type: string
        description: ''
  - name: 'getRangeEdge(direction, activeCell)'
    uid: 'ExcelScript!ExcelScript.Range#getRangeEdge:member(1)'
    package: ExcelScript!
    fullName: 'getRangeEdge(direction, activeCell)'
    summary: 'Возвращает объект диапазона, который является краеугольным элементом области данных, соответствующей предоставленной направлению. Это соответствует поведению ключа Ctrl+Arrow в Excel Windows пользовательского интерфейса.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getRangeEdge(
                    direction: KeyboardDirection,
                    activeCell?: Range | string
                ): Range;
      parameters:
        - id: direction
          description: Направление от активной ячейки.
          type: '<xref uid="ExcelScript!ExcelScript.KeyboardDirection:enum" />'
        - id: activeCell
          description: 'Активная ячейка в этом диапазоне. По умолчанию активная ячейка является верхней левой ячейкой диапазона. Ошибка выброшена, если активная ячейка не находится в этом диапазоне.'
          type: |-
            <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
                    
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: 'getResizedRange(deltaRows, deltaColumns)'
    uid: 'ExcelScript!ExcelScript.Range#getResizedRange:member(1)'
    package: ExcelScript!
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    summary: 'Получает объект, похожий на текущий объект, но с его нижним правым углом, расширенным (или законтрактованым) рядом строк `Range` `Range` и столбцов.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
      parameters:
        - id: deltaRows
          description: 'Количество строк, добавляемых в правый нижний угол, относительно текущего диапазона. Используйте положительное число, чтобы расширить диапазон или отрицательное число, чтобы уменьшить его.'
          type: number
        - id: deltaColumns
          description: 'Количество столбцов, с помощью которых можно расширить нижний правый угол по отношению к текущему диапазону. Используйте положительное число, чтобы расширить диапазон или отрицательное число, чтобы уменьшить его.'
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /**
           * This script copies the formatting in the active cell to the neighboring cells.
           * Note that this script only works when the active cell isn't on an edge of the worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the active cell.
            let activeCell = workbook.getActiveCell();

            // Get the cell that's one row above and one column to the left of the active cell.
            let cornerCell = activeCell.getOffsetRange(-1,-1);

            // Get a range that includes all the cells surrounding the active cell.
            let surroundingRange = cornerCell.getResizedRange(2, 2)

            // Copy the formatting from the active cell to the new range.
            surroundingRange.copyFrom(
              activeCell, /* The source range. */
              ExcelScript.RangeCopyType.formats /* What to copy. */
            );
          }
          ```
  - name: getRow(row)
    uid: 'ExcelScript!ExcelScript.Range#getRow:member(1)'
    package: ExcelScript!
    fullName: getRow(row)
    summary: Возвращает строку из диапазона.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRow(row: number): Range;'
      parameters:
        - id: row
          description: 'Номер строки диапазона, который требуется извлечь. Используется нулевой индекс.'
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getRowCount()
    uid: 'ExcelScript!ExcelScript.Range#getRowCount:member(1)'
    package: ExcelScript!
    fullName: getRowCount()
    summary: Возвращает общее количество строк в диапазоне.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowCount(): number;'
      return:
        type: number
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - name: getRowHidden()
    uid: 'ExcelScript!ExcelScript.Range#getRowHidden:member(1)'
    package: ExcelScript!
    fullName: getRowHidden()
    summary: 'Представляет, если все строки в текущем диапазоне скрыты. Значение — `true` это когда все строки в диапазоне скрыты. Значение — `false` это когда строки в диапазоне не скрыты. Значение — когда некоторые строки в диапазоне скрыты, а другие строки в том же диапазоне `null` не скрыты.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowHidden(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getRowIndex()
    uid: 'ExcelScript!ExcelScript.Range#getRowIndex:member(1)'
    package: ExcelScript!
    fullName: getRowIndex()
    summary: Возвращает номер строки первой ячейки диапазона. Используется нулевой индекс.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowIndex(): number;'
      return:
        type: number
        description: ''
  - name: getRowsAbove(count)
    uid: 'ExcelScript!ExcelScript.Range#getRowsAbove:member(1)'
    package: ExcelScript!
    fullName: getRowsAbove(count)
    summary: Получает определенное количество строк выше текущего `Range` объекта.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowsAbove(count?: number): Range;'
      parameters:
        - id: count
          description: 'Необязательный. Количество строк, включаемых в полученный диапазон. Чтобы создать диапазон за пределами текущего диапазона, используйте положительное число. Вы также можете использовать отрицательное число, чтобы создать диапазон в рамках текущего диапазона. Значение по умолчанию — 1.'
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getRowsBelow(count)
    uid: 'ExcelScript!ExcelScript.Range#getRowsBelow:member(1)'
    package: ExcelScript!
    fullName: getRowsBelow(count)
    summary: Получает определенное количество строк ниже текущего `Range` объекта.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowsBelow(count?: number): Range;'
      parameters:
        - id: count
          description: 'Необязательный. Количество строк, включаемых в полученный диапазон. Чтобы создать диапазон за пределами текущего диапазона, используйте положительное число. Вы также можете использовать отрицательное число, чтобы создать диапазон в рамках текущего диапазона. Значение по умолчанию — 1.'
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getSavedAsArray()
    uid: 'ExcelScript!ExcelScript.Range#getSavedAsArray:member(1)'
    package: ExcelScript!
    fullName: getSavedAsArray()
    summary: 'Представляет, будут ли сохранены все ячейки в качестве формулы массива. Возвращается, если все ячейки будут сохранены в качестве формулы массива, или если все ячейки не будут сохранены `true` `false` в качестве формулы массива. `null`Возвращается, если некоторые ячейки будут сохранены в качестве формулы массива, а некоторые не будут.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSavedAsArray(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getSort()
    uid: 'ExcelScript!ExcelScript.Range#getSort:member(1)'
    package: ExcelScript!
    fullName: getSort()
    summary: Представляет порядок сортировки текущего диапазона.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSort(): RangeSort;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeSort:interface" />'
        description: ''
  - name: 'getSpecialCells(cellType, cellValueType)'
    uid: 'ExcelScript!ExcelScript.Range#getSpecialCells:member(1)'
    package: ExcelScript!
    fullName: 'getSpecialCells(cellType, cellValueType)'
    summary: 'Получает объект, состоящий из одного или нескольких диапазонов, который представляет все ячейки, которые соответствуют указанному `RangeAreas` типу и значению. Если специальные ячейки не найдены, эта функция возвращает объект с его `isNullObject` свойством `true`<!-- -->.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getSpecialCells(
                    cellType: SpecialCellType,
                    cellValueType?: SpecialCellValueType
                ): RangeAreas;
      parameters:
        - id: cellType
          description: 'Тип ячеек, которые необходимо включить.'
          type: '<xref uid="ExcelScript!ExcelScript.SpecialCellType:enum" />'
        - id: cellValueType
          description: 'Если `cellType` либо, `constants` либо `formulas`<!-- -->Этот аргумент используется для определения типов ячеек, которые необходимо включить в результат. Эти значения можно объединить, чтобы вернуть несколько типов. По умолчанию необходимо выбрать все константы или формулы независимо от типа.'
          type: '<xref uid="ExcelScript!ExcelScript.SpecialCellValueType:enum" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />'
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /**
           * This sample gets all the blank cells in the current worksheet's used range. It then highlights all those cells with a yellow background.
           */
          function main(workbook: ExcelScript.Workbook) {
              // Get the current used range.
              let range = workbook.getActiveWorksheet().getUsedRange();
              
              // Get all the blank cells.
              let blankCells = range.getSpecialCells(ExcelScript.SpecialCellType.blanks);
              // Highlight the blank cells with a yellow background.
              blankCells.getFormat().getFill().setColor("yellow");
          }
          ```
  - name: getSpillingToRange()
    uid: 'ExcelScript!ExcelScript.Range#getSpillingToRange:member(1)'
    package: ExcelScript!
    fullName: getSpillingToRange()
    summary: 'Получает объект range, содержащий диапазон переноса при вызове для базовой ячейки. Если диапазон не является якорной ячейкой или диапазон разлива не может быть найден, эта функция возвращает объект с его `isNullObject` свойством `true`<!-- -->.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSpillingToRange(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getSpillParent()
    uid: 'ExcelScript!ExcelScript.Range#getSpillParent:member(1)'
    package: ExcelScript!
    fullName: getSpillParent()
    summary: 'Получает объект диапазона, содержащий якорную ячейку для пролитой ячейки. Если это не разлитая ячейка или не дается несколько ячейк, эта функция возвращает объект с заданным `isNullObject` свойством `true`<!-- -->.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSpillParent(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getSurroundingRegion()
    uid: 'ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)'
    package: ExcelScript!
    fullName: getSurroundingRegion()
    summary: 'Возвращает `Range` объект, который представляет окружающий регион для верхнего левого элемента в этом диапазоне. Это диапазон, ограниченный любым сочетанием пустых строк и столбцов, относящихся к этому диапазону.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSurroundingRegion(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getTables(fullyContained)
    uid: 'ExcelScript!ExcelScript.Range#getTables:member(1)'
    package: ExcelScript!
    fullName: getTables(fullyContained)
    summary: 'Получает коллекцию таблиц с заданной областью, перекрывающую диапазон.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTables(fullyContained?: boolean): Table[];'
      parameters:
        - id: fullyContained
          description: 'Если `true`<!-- -->возвращает только таблицы, полностью содержащиеся в пределах диапазона. Значение по умолчанию `false`<!-- -->.'
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Table:interface" />[]'
        description: ''
  - name: getText()
    uid: 'ExcelScript!ExcelScript.Range#getText:member(1)'
    package: ExcelScript!
    fullName: getText()
    summary: 'Представляет текстовое значение указанного диапазона. Текстовое значение не зависит от ширины ячейки. Замена знака, которая Excel пользовательском интерфейсе, не повлияет на текстовое \# значение, возвращаемую API. Если диапазон содержит несколько ячеек, возвращаются данные из первой ячейки (представленные индексом строки 0 и индексом столбца 0).'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getText(): string;'
      return:
        type: string
        description: ''
  - name: getTexts()
    uid: 'ExcelScript!ExcelScript.Range#getTexts:member(1)'
    package: ExcelScript!
    fullName: getTexts()
    summary: 'Текстовые значения указанного диапазона. Текстовое значение не зависит от ширины ячейки. Замена знака номера () в пользовательском интерфейсе Excel не повлияет на текстовое значение, возвращаемого \# API.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTexts(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getTop()
    uid: 'ExcelScript!ExcelScript.Range#getTop:member(1)'
    package: ExcelScript!
    fullName: getTop()
    summary: Возвращает расстояние в точках для 100% масштабирования от верхнего края таблицы до верхнего края диапазона.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTop(): number;'
      return:
        type: number
        description: ''
  - name: getUsedRange(valuesOnly)
    uid: 'ExcelScript!ExcelScript.Range#getUsedRange:member(1)'
    package: ExcelScript!
    fullName: getUsedRange(valuesOnly)
    summary: 'Возвращает используемый диапазон заданного объекта диапазона. Если в диапазоне нет используемых ячеек, эта функция возвращает объект с его `isNullObject` свойством `true`<!-- -->.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      parameters:
        - id: valuesOnly
          description: Учитывает только ячейки со значениями.
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getValue()
    uid: 'ExcelScript!ExcelScript.Range#getValue:member(1)'
    package: ExcelScript!
    fullName: getValue()
    summary: 'Представляет необработанные значения указанного диапазона. Могут возвращаться строковые и числовые данные, а также логические значения. Ячейка, которая содержит ошибку, вернет строку ошибки. Если диапазон содержит несколько ячеек, возвращаются данные из первой ячейки (представленные индексом строки 0 и индексом столбца 0).'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getValue(): string | number | boolean;'
      return:
        type: string | number | boolean
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /**
           * This sample reads the value of A1 and prints it to the console.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the value of cell A1.
            let range = selectedSheet.getRange("A1");
            
            // Print the value of A1.
            console.log(range.getValue());
          }
          ```
  - name: getValues()
    uid: 'ExcelScript!ExcelScript.Range#getValues:member(1)'
    package: ExcelScript!
    fullName: getValues()
    summary: 'Представляет необработанные значения указанного диапазона. Возвращенные данные могут быть строкой, номером или boolean. Ячейки, содержащие ошибку, вернут строку ошибки. Если возвращенное значение начинается с плюса ("+"), минуса ("-"), или равного знака ("="), Excel интерпретирует это значение как формулу.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getValues(): (string | number | boolean)[][];'
      return:
        type: '(string | number | boolean)[][]'
        description: ''
  - name: getValueType()
    uid: 'ExcelScript!ExcelScript.Range#getValueType:member(1)'
    package: ExcelScript!
    fullName: getValueType()
    summary: 'Представляет тип данных в ячейке. Если диапазон содержит несколько ячеек, возвращаются данные из первой ячейки (представленные индексом строки 0 и индексом столбца 0).'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getValueType(): RangeValueType;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeValueType:enum" />'
        description: ''
  - name: getValueTypes()
    uid: 'ExcelScript!ExcelScript.Range#getValueTypes:member(1)'
    package: ExcelScript!
    fullName: getValueTypes()
    summary: Указывает тип данных в каждой ячейке.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getValueTypes(): RangeValueType[][];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeValueType:enum" />[][]'
        description: ''
  - name: getVisibleView()
    uid: 'ExcelScript!ExcelScript.Range#getVisibleView:member(1)'
    package: ExcelScript!
    fullName: getVisibleView()
    summary: Представляет видимые строки текущего диапазона.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getVisibleView(): RangeView;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeView:interface" />'
        description: ''
  - name: getWidth()
    uid: 'ExcelScript!ExcelScript.Range#getWidth:member(1)'
    package: ExcelScript!
    fullName: getWidth()
    summary: Возвращает расстояние в точках для 100% масштабирования от левого края диапазона до правого края диапазона.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getWidth(): number;'
      return:
        type: number
        description: ''
  - name: getWorksheet()
    uid: 'ExcelScript!ExcelScript.Range#getWorksheet:member(1)'
    package: ExcelScript!
    fullName: getWorksheet()
    summary: 'Лист, содержащий текущий диапазон.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getWorksheet(): Worksheet;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Worksheet:interface" />'
        description: ''
  - name: group(groupOption)
    uid: 'ExcelScript!ExcelScript.Range#group:member(1)'
    package: ExcelScript!
    fullName: group(groupOption)
    summary: Группы столбцов и строк для контура.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'group(groupOption: GroupOption): void;'
      parameters:
        - id: groupOption
          description: 'Указывает, как диапазон можно сгруппить по строкам или столбцам. Ошибка выброшена, если групповой параметр отличается от диапазона или свойства (например, является верным и является "ByColumns" или является true и является `InvalidArgument` `isEntireRow` `isEntireColumn` `range.isEntireRow` `groupOption` `range.isEntireColumn` `groupOption` "ByRows").'
          type: '<xref uid="ExcelScript!ExcelScript.GroupOption:enum" />'
      return:
        type: void
        description: ''
  - name: hideGroupDetails(groupOption)
    uid: 'ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)'
    package: ExcelScript!
    fullName: hideGroupDetails(groupOption)
    summary: Скрывает сведения о группе строки или столбца.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hideGroupDetails(groupOption: GroupOption): void;'
      parameters:
        - id: groupOption
          description: 'Указывает, следует ли скрывать сведения о сгруппных строках или сгруппивных столбцах.'
          type: '<xref uid="ExcelScript!ExcelScript.GroupOption:enum" />'
      return:
        type: void
        description: ''
  - name: insert(shift)
    uid: 'ExcelScript!ExcelScript.Range#insert:member(1)'
    package: ExcelScript!
    fullName: insert(shift)
    summary: 'Вставляет ячейку или диапазон ячеек на лист вместо этого диапазона, а также сдвигает другие ячейки, чтобы освободить место. Возвращает новый объект `Range` в пустом пространстве.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insert(shift: InsertShiftDirection): Range;'
      parameters:
        - id: shift
          description: Определяет способ сдвига ячеек. Подробные `ExcelScript.InsertShiftDirection` сведения см. в материале.
          type: '<xref uid="ExcelScript!ExcelScript.InsertShiftDirection:enum" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: merge(across)
    uid: 'ExcelScript!ExcelScript.Range#merge:member(1)'
    package: ExcelScript!
    fullName: merge(across)
    summary: Объединяет ячейки диапазона в одну область на листе.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'merge(across?: boolean): void;'
      parameters:
        - id: across
          description: Необязательное свойство. Установите `true` для объединения ячеек в каждом ряду указанного диапазона в качестве отдельных объединенных ячеек. Значение по умолчанию `false`<!-- -->.
          type: boolean
      return:
        type: void
        description: ''
  - name: moveTo(destinationRange)
    uid: 'ExcelScript!ExcelScript.Range#moveTo:member(1)'
    package: ExcelScript!
    fullName: moveTo(destinationRange)
    summary: 'Перемещает значения ячейки, форматирование и формулы из текущего диапазона в диапазон назначения, заменяя старые сведения в этих ячейках. Диапазон назначения будет автоматически расширяться, если он меньше текущего диапазона. Все ячейки в диапазоне назначения, которые находятся за пределами области исходного диапазона, не меняются.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      parameters:
        - id: destinationRange
          description: 'destinationRange указывает диапазон, куда будут перемещены сведения в этом диапазоне.'
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
      return:
        type: void
        description: ''
  - name: 'removeDuplicates(columns, includesHeader)'
    uid: 'ExcelScript!ExcelScript.Range#removeDuplicates:member(1)'
    package: ExcelScript!
    fullName: 'removeDuplicates(columns, includesHeader)'
    summary: 'Удаляет повторяющиеся значения из диапазона, заданного столбцами.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        removeDuplicates(
                    columns: number[],
                    includesHeader: boolean
                ): RemoveDuplicatesResult;
      parameters:
        - id: columns
          description: 'Столбцы внутри диапазона, которые могут содержать дубликаты. Необходимо у указывается по крайней мере один столбец. Используется нулевой индекс.'
          type: 'number[]'
        - id: includesHeader
          description: 'True, если данные ввода содержат заглавную. Значение по умолчанию: false.'
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RemoveDuplicatesResult:interface" />'
        description: ''
  - name: 'replaceAll(text, replacement, criteria)'
    uid: 'ExcelScript!ExcelScript.Range#replaceAll:member(1)'
    package: ExcelScript!
    fullName: 'replaceAll(text, replacement, criteria)'
    summary: 'Находит и заменяет определенную строку на основе условий, указанных в текущем диапазоне.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): number;
      parameters:
        - id: text
          description: 'Строка, чтобы найти.'
          type: string
        - id: replacement
          description: 'Строка, которая заменяет исходную строку.'
          type: string
        - id: criteria
          description: Дополнительные критерии замены.
          type: '<xref uid="ExcelScript!ExcelScript.ReplaceCriteria:interface" />'
      return:
        type: number
        description: ''
  - name: select()
    uid: 'ExcelScript!ExcelScript.Range#select:member(1)'
    package: ExcelScript!
    fullName: select()
    summary: Выбирает указанный диапазон в пользовательском интерфейсе Excel.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(): void;'
      return:
        type: void
        description: ''
  - name: setColumnHidden(columnHidden)
    uid: 'ExcelScript!ExcelScript.Range#setColumnHidden:member(1)'
    package: ExcelScript!
    fullName: setColumnHidden(columnHidden)
    summary: 'Представляет, скрыты ли все столбцы текущего диапазона. Значение — `true` это когда все столбцы в диапазоне скрыты. Значение — `false` это когда столбцы в диапазоне не скрыты. Значение — когда некоторые столбцы в диапазоне скрыты, а другие столбцы в том `null` же диапазоне не скрыты.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setColumnHidden(columnHidden: boolean): void;'
      parameters:
        - id: columnHidden
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: setDirty()
    uid: 'ExcelScript!ExcelScript.Range#setDirty:member(1)'
    package: ExcelScript!
    fullName: setDirty()
    summary: 'Устанавливает диапазон, предназначенный для пересчета при выполнении следующего пересчета.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setDirty(): void;'
      return:
        type: void
        description: ''
  - name: setFormula(formula)
    uid: 'ExcelScript!ExcelScript.Range#setFormula:member(1)'
    package: ExcelScript!
    fullName: setFormula(formula)
    summary: 'Задает формулу ячейки в нотации в стиле A1. Если диапазон содержит несколько ячеек, каждая ячейка в заданном диапазоне будет обновляться с помощью входных данных.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormula(formula: string): void;'
      parameters:
        - id: formula
          description: ''
          type: string
      return:
        type: void
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /*
           * This script sets a cell's formula, 
           * then displays how Excel stores the cell's formula and value separately.
           */
          function main(workbook: ExcelScript.Workbook) {
            let selectedSheet = workbook.getActiveWorksheet();

            // Set A1 to 2.
            let a1 = selectedSheet.getRange("A1");
            a1.setValue(2);

            // Set B1 to the formula =(2*A1), which should equal 4.
            let b1 = selectedSheet.getRange("B1")
            b1.setFormula("=(2*A1)");

            // Log the current results for `getFormula` and `getValue` at B1.
            console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);
          }
          ```
  - name: setFormulaLocal(formulaLocal)
    uid: 'ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)'
    package: ExcelScript!
    fullName: setFormulaLocal(formulaLocal)
    summary: 'Установите формулу ячейки в нотации в стиле A1 на языке пользователя и в языковом формате номеров. Например, английская формула =SUM(A1, 1.5) превратится в "=СУММ(A1; 1,5)" на русском языке. Если диапазон содержит несколько ячеек, каждая ячейка в заданном диапазоне будет обновляться с помощью входных данных.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulaLocal(formulaLocal: string): void;'
      parameters:
        - id: formulaLocal
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setFormulaR1C1(formulaR1C1)
    uid: 'ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)'
    package: ExcelScript!
    fullName: setFormulaR1C1(formulaR1C1)
    summary: 'Задает формулу ячейки в нотации в стиле R1C1. Если диапазон содержит несколько ячеек, каждая ячейка в заданном диапазоне будет обновляться с помощью входных данных.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulaR1C1(formulaR1C1: string): void;'
      parameters:
        - id: formulaR1C1
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setFormulas(formulas)
    uid: 'ExcelScript!ExcelScript.Range#setFormulas:member(1)'
    package: ExcelScript!
    fullName: setFormulas(formulas)
    summary: 'Представляет формулу в формате A1. Если ячейка не имеет формулы, вместо нее возвращается ее значение.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulas(formulas: string[][]): void;'
      parameters:
        - id: formulas
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setFormulasLocal(formulasLocal)
    uid: 'ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)'
    package: ExcelScript!
    fullName: setFormulasLocal(formulasLocal)
    summary: 'Представляет формулу в нотации стиля A1 на языке пользователя и в соответствии с его языковым стандартом. Например, английская формула =SUM(A1, 1.5) превратится в "=СУММ(A1; 1,5)" на русском языке. Если ячейка не имеет формулы, вместо нее возвращается ее значение.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulasLocal(formulasLocal: string[][]): void;'
      parameters:
        - id: formulasLocal
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setFormulasR1C1(formulasR1C1)
    uid: 'ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)'
    package: ExcelScript!
    fullName: setFormulasR1C1(formulasR1C1)
    summary: 'Представляет формулу в формате R1C1. Если ячейка не имеет формулы, вместо нее возвращается ее значение.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulasR1C1(formulasR1C1: string[][]): void;'
      parameters:
        - id: formulasR1C1
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setHyperlink(hyperlink)
    uid: 'ExcelScript!ExcelScript.Range#setHyperlink:member(1)'
    package: ExcelScript!
    fullName: setHyperlink(hyperlink)
    summary: Представляет гиперссылку для текущего диапазона.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setHyperlink(hyperlink: RangeHyperlink): void;'
      parameters:
        - id: hyperlink
          description: ''
          type: '<xref uid="ExcelScript!ExcelScript.RangeHyperlink:interface" />'
      return:
        type: void
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /** 
           * This script inserts a hyperlink to the first cell of the last worksheet in the workbook.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the active cell.
            let cell = workbook.getActiveCell();

            // Get the last worksheet in the workbook.
            // Note that this might be the current sheet if there's only one worksheet.
            let lastSheet = workbook.getLastWorksheet();

            // Get sheet name. 
            let linkedSheetName = lastSheet.getName();
            console.log(`Setting hyperlink of ${cell.getAddress()} to the ${linkedSheetName} sheet's A1 cell`);

            // Set the text for the hyperlink.
            let value = `Click to go to: ${linkedSheetName}`;

            // Create the hyperlink using that cell's value.
            cell.setHyperlink({
              textToDisplay: value.toString(),
              screenTip: `Navigate to ${linkedSheetName}`,
              documentReference: `${linkedSheetName}!A1`
            });
          }
          ```
  - name: setNumberFormat(numberFormat)
    uid: 'ExcelScript!ExcelScript.Range#setNumberFormat:member(1)'
    package: ExcelScript!
    fullName: setNumberFormat(numberFormat)
    summary: 'Задает код Excel формата номера для данного диапазона. Если диапазон содержит несколько ячеек, каждая ячейка в заданном диапазоне будет обновляться с помощью входных данных.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setNumberFormat(numberFormat: string): void;'
      parameters:
        - id: numberFormat
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setNumberFormatLocal(numberFormatLocal)
    uid: 'ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)'
    package: ExcelScript!
    fullName: setNumberFormatLocal(numberFormatLocal)
    summary: 'Задает код Excel формата номера для данного диапазона в зависимости от языковых параметров пользователя. Excel не выполняет принуждение языка или формата при получении или настройке `numberFormatLocal` свойства. Любой возвращенный текст использует локально отформатированные строки на основе языка, указанного в параметрах системы. Если диапазон содержит несколько ячеек, каждая ячейка в заданном диапазоне будет обновляться с помощью входных данных.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setNumberFormatLocal(numberFormatLocal: string): void;'
      parameters:
        - id: numberFormatLocal
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setNumberFormats(numberFormats)
    uid: 'ExcelScript!ExcelScript.Range#setNumberFormats:member(1)'
    package: ExcelScript!
    fullName: setNumberFormats(numberFormats)
    summary: Представляет Excel формата номеров для данного диапазона.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setNumberFormats(numberFormats: string[][]): void;'
      parameters:
        - id: numberFormats
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setNumberFormatsLocal(numberFormatsLocal)
    uid: 'ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)'
    package: ExcelScript!
    fullName: setNumberFormatsLocal(numberFormatsLocal)
    summary: 'Представляет Excel формата номера для данного диапазона в зависимости от языковых параметров пользователя. Excel не выполняет принуждение языка или формата при получении или настройке `numberFormatLocal` свойства. Любой возвращенный текст использует локально отформатированные строки на основе языка, указанного в параметрах системы.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setNumberFormatsLocal(numberFormatsLocal: string[][]): void;'
      parameters:
        - id: numberFormatsLocal
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setPredefinedCellStyle(predefinedCellStyle)
    uid: 'ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)'
    package: ExcelScript!
    fullName: setPredefinedCellStyle(predefinedCellStyle)
    summary: 'Представляет стиль текущего диапазона. Если стили ячеек несовместимы, `null` они будут возвращены. Для пользовательских стилей будет возвращено имя стиля. Для встроенных стилей будет возвращена строка, представляющая значение в `BuiltInStyle` enum.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
      parameters:
        - id: predefinedCellStyle
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setRowHidden(rowHidden)
    uid: 'ExcelScript!ExcelScript.Range#setRowHidden:member(1)'
    package: ExcelScript!
    fullName: setRowHidden(rowHidden)
    summary: 'Представляет, если все строки в текущем диапазоне скрыты. Значение — `true` это когда все строки в диапазоне скрыты. Значение — `false` это когда строки в диапазоне не скрыты. Значение — когда некоторые строки в диапазоне скрыты, а другие строки в том же диапазоне `null` не скрыты.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setRowHidden(rowHidden: boolean): void;'
      parameters:
        - id: rowHidden
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: setValue(value)
    uid: 'ExcelScript!ExcelScript.Range#setValue:member(1)'
    package: ExcelScript!
    fullName: setValue(value)
    summary: 'Задает необработанные значения указанного диапазона. Заданный набор данных может быть строкой типа, номером или boolean. `null`значение будет проигнорировано (не установлено или не перезаписано в Excel). Если диапазон содержит несколько ячеек, каждая ячейка в заданном диапазоне будет обновляться с помощью входных данных.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setValue(value: any): void;'
      parameters:
        - id: value
          description: ''
          type: any
      return:
        type: void
        description: ''
  - name: setValues(values)
    uid: 'ExcelScript!ExcelScript.Range#setValues:member(1)'
    package: ExcelScript!
    fullName: setValues(values)
    summary: 'Задает необработанные значения указанного диапазона. Предоставленные данные могут быть строкой, номером или boolean. Если предоставленное значение начинается с плюса ("+"), минуса ("-"), или равного знака ("="), Excel интерпретирует это значение как формулу.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setValues(values: (string | number | boolean)[][]): void;'
      parameters:
        - id: values
          description: ''
          type: '(string | number | boolean)[][]'
      return:
        type: void
        description: |-


          #### <a name="examples"></a>Примеры

          ```TypeScript
          /**
           * This sample inserts some pre-loaded data into a range.
           * It also shows how to get a range that fits the data.
           */
           function main(workbook: ExcelScript.Workbook) {
             // Get the active cell.
             let currentCell = workbook.getActiveCell();
             
             // Calculate the range needed to fit the given data.
             let targetRange = currentCell.getResizedRange(DATA.length - 1, DATA[0].length - 1);

             // Set range values to the data.
             targetRange.setValues(DATA);

             // Autofit the columns so the worksheet is readable. 
             targetRange.getFormat().autofitColumns();
           }

           /* 
            * This sample's data is in a static 2-dimensional array.
            * You could also get the input from other ranges or sources.
            * Note that each row must have the same number of columns to be valid. 
            */
           const DATA = [
             ['Date', 'Salesperson', 'Product', 'Amount']
             , ['3/2/2020', 'Anne', 'Pizza', '$1400']
             , ['3/2/2020', 'Mariya', 'Pizza', '$1700']
             , ['3/7/2020', 'Mark', 'Sandwiches', '$1010']
             , ['3/24/2020', 'Anne', 'Pizza', '$750']
             , ['3/28/2020', 'Mark', 'Salads', '$510']
             , ['4/17/2020', 'Laura', 'Salads', '$900']
             , ['4/17/2020', 'Mariya', 'Salads', '$1600']
             , ['4/28/2020', 'Laura', 'Sandwiches', '$680']
           ];
          ```
  - name: showCard()
    uid: 'ExcelScript!ExcelScript.Range#showCard:member(1)'
    package: ExcelScript!
    fullName: showCard()
    summary: 'Отображает карточку для активной ячейки, если она имеет содержимое c форматированным значением.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showCard(): void;'
      return:
        type: void
        description: ''
  - name: showGroupDetails(groupOption)
    uid: 'ExcelScript!ExcelScript.Range#showGroupDetails:member(1)'
    package: ExcelScript!
    fullName: showGroupDetails(groupOption)
    summary: Отображает сведения о группе строки или столбца.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showGroupDetails(groupOption: GroupOption): void;'
      parameters:
        - id: groupOption
          description: 'Указывает, следует ли показывать сведения о сгруппных строках или сгруппивных столбцах.'
          type: '<xref uid="ExcelScript!ExcelScript.GroupOption:enum" />'
      return:
        type: void
        description: ''
  - name: ungroup(groupOption)
    uid: 'ExcelScript!ExcelScript.Range#ungroup:member(1)'
    package: ExcelScript!
    fullName: ungroup(groupOption)
    summary: Разгруппировка столбцов и строк для контура.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ungroup(groupOption: GroupOption): void;'
      parameters:
        - id: groupOption
          description: 'Указывает, как диапазон можно разгруппировать по строкам или столбцам.'
          type: '<xref uid="ExcelScript!ExcelScript.GroupOption:enum" />'
      return:
        type: void
        description: ''
  - name: unmerge()
    uid: 'ExcelScript!ExcelScript.Range#unmerge:member(1)'
    package: ExcelScript!
    fullName: unmerge()
    summary: Разъединяет ячейки диапазона на отдельные ячейки.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'unmerge(): void;'
      return:
        type: void
        description: ''