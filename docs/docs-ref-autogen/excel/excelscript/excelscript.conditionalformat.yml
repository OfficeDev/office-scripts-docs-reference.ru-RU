### YamlMime:TSType
name: ExcelScript.ConditionalFormat
uid: ExcelScript!ExcelScript.ConditionalFormat:interface
package: ExcelScript!
fullName: ExcelScript.ConditionalFormat
summary: Объект, инкапсулирует диапазон, формат, правило и другие свойства условного формата.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: delete()
  uid: ExcelScript!ExcelScript.ConditionalFormat#delete:member(1)
  package: ExcelScript!
  fullName: delete()
  summary: Удаляет это условное форматирование.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: ''
- name: getCellValue()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getCellValue:member(1)
  package: ExcelScript!
  fullName: getCellValue()
  summary: Возвращает свойства условного формата значения ячейки, если текущий условный формат является типом `CellValue` .
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCellValue(): CellValueConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.CellValueConditionalFormat:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```TypeScript\n/**\n * This script applies conditional formatting to a range.\n * That formatting is conditional upon the cell's numerical value.\n * Any value between 50 and 75 will have the cell fill color changed and the font made italic.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the range to format.\n  const sheet = workbook.getActiveWorksheet();\n  const ratingColumn = sheet.getRange(\"D2:D20\");\n\n  // Add cell value conditional formatting.\n  const cellValueConditionalFormatting = ratingColumn.addConditionalFormat(ExcelScript.ConditionalFormatType.cellValue).getCellValue();\n  \n  // Create the condition, in this case when the cell value is between 50 and 75.\n  let rule: ExcelScript.ConditionalCellValueRule = {\n    formula1: \"50\",\n    formula2: \"75\",\n    operator: ExcelScript.ConditionalCellValueOperator.between\n  };\n  cellValueConditionalFormatting.setRule(rule);\n\n  // Set the format to apply when the condition is met.\n  let format = cellValueConditionalFormatting.getFormat();\n  format.getFill().setColor(\"yellow\");\n  format.getFont().setItalic(true);\n\n}\n```"
- name: getColorScale()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getColorScale:member(1)
  package: ExcelScript!
  fullName: getColorScale()
  summary: Возвращает свойства условного формата цветовой шкалы, если текущий условный формат является типом `ColorScale` .
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColorScale(): ColorScaleConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.ColorScaleConditionalFormat:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```TypeScript\n/**\n * This script applies a red, white, and blue color scale to the selected range.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the selected range.\n  let selectedRange = workbook.getSelectedRange();\n\n  // Create a new conditional formatting object by adding one to the range.\n  let conditionalFormatting = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.colorScale);\n\n  // Set the colors for the three parts of the scale: minimum, midpoint, and maximum.\n  conditionalFormatting.getColorScale().setCriteria({\n    minimum: {\n      color:\"#F8696B\", /* A pale red. */\n      type:ExcelScript.ConditionalFormatColorCriterionType.lowestValue\n    },\n    midpoint: {\n      color: \"#FCFCFF\", /* Slightly off-white. */\n      formula:'=50',type:ExcelScript.ConditionalFormatColorCriterionType.percentile\n    },\n    maximum: {\n      color: \"#5A8AC6\", /* A pale blue. */\n      type:ExcelScript.ConditionalFormatColorCriterionType.highestValue\n    }\n  });\n}\n```"
- name: getCustom()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getCustom:member(1)
  package: ExcelScript!
  fullName: getCustom()
  summary: Возвращает настраиваемые свойства условного формата, если текущий условный формат является пользовательским типом.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustom(): CustomConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomConditionalFormat:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```TypeScript\n/**\n * This script applies a custom conditional formatting to the selected range.\n * A light-green fill is applied to a cell if the value is larger than the value in the row's previous column.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the selected cells.\n  let selectedRange = workbook.getSelectedRange();\n\n  // Apply a rule for positive change from the previous column.\n  let positiveChange = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.custom);\n  positiveChange.getCustom().getFormat().getFill().setColor(\"lightgreen\");\n  positiveChange.getCustom().getRule().setFormula(`=${selectedRange.getCell(0, 0).getAddress()}>${selectedRange.getOffsetRange(0, -1).getCell(0, 0).getAddress()}`);\n}\n```"
- name: getDataBar()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getDataBar:member(1)
  package: ExcelScript!
  fullName: getDataBar()
  summary: Возвращает свойства панели данных, если текущий условный формат является панелью данных.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataBar(): DataBarConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DataBarConditionalFormat:interface" /> | undefined
      description: ''
- name: getIconSet()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getIconSet:member(1)
  package: ExcelScript!
  fullName: getIconSet()
  summary: Возвращает свойства условного формата набора значков, если текущий условный формат является типом `IconSet` .
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIconSet(): IconSetConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.IconSetConditionalFormat:interface" /> | undefined
      description: ''
- name: getId()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getId:member(1)
  package: ExcelScript!
  fullName: getId()
  summary: Приоритет условного формата в текущем `ConditionalFormatCollection`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getId(): string;'
    return:
      type: string
      description: ''
- name: getPreset()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getPreset:member(1)
  package: ExcelScript!
  fullName: getPreset()
  summary: Возвращает условный формат предустановки условий. Дополнительные сведения см. в разделе `ExcelScript.PresetCriteriaConditionalFormat`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreset(): PresetCriteriaConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PresetCriteriaConditionalFormat:interface" /> | undefined
      description: ''
- name: getPriority()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getPriority:member(1)
  package: ExcelScript!
  fullName: getPriority()
  summary: Приоритет (или индекс) в коллекции условного формата, в котором в настоящее время существует этот условный формат. Изменение этого параметра также изменяет приоритеты других условных форматов, чтобы обеспечить непрерывный порядок приоритетов. Используйте отрицательный приоритет, чтобы начать с обратной части. Приоритеты, превышающее границы, будут получаться и устанавливаться в максимальном (или минимальном, если отрицательном) приоритете. Также обратите внимание, что при изменении приоритета необходимо повторно получить новую копию объекта в этом новом расположении приоритета, если вы хотите внести в него дополнительные изменения.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPriority(): number;'
    return:
      type: number
      description: ''
- name: getRange()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getRange:member(1)
  package: ExcelScript!
  fullName: getRange()
  summary: Возвращает диапазон, к которому применяется кондитональный формат. Если условный формат применяется к нескольким диапазонам, этот метод возвращает `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getRanges()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getRanges:member(1)
  package: ExcelScript!
  fullName: getRanges()
  summary: Возвращает `RangeAreas`<!-- -->, состоящий из одного или нескольких прямоугольных диапазонов, к которым применяется кондитональный формат.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRanges(): RangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getStopIfTrue()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getStopIfTrue:member(1)
  package: ExcelScript!
  fullName: getStopIfTrue()
  summary: Если выполняются условия этого условного форматирования, форматы с более низким приоритетом не будут применяться в этой ячейке. Значение находится `null` на гистограммах, наборах значков и цветовых шкалах, `StopIfTrue` так как для них нет концепции.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getStopIfTrue(): boolean;'
    return:
      type: boolean
      description: ''
- name: getTextComparison()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getTextComparison:member(1)
  package: ExcelScript!
  fullName: getTextComparison()
  summary: Возвращает определенные свойства условного формата текста, если текущий условный формат является текстовым типом. Например, для форматирования ячеек, соответствующих слову "Текст".
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTextComparison(): TextConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TextConditionalFormat:interface" /> | undefined
      description: ''
- name: getTopBottom()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getTopBottom:member(1)
  package: ExcelScript!
  fullName: getTopBottom()
  summary: Возвращает свойства условного формата верхнего и нижнего значений, если текущий условный формат является типом `TopBottom` . Например, чтобы отформатировать первые 10 % или 10 элементов снизу.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTopBottom(): TopBottomConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TopBottomConditionalFormat:interface" /> | undefined
      description: ''
- name: getType()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getType:member(1)
  package: ExcelScript!
  fullName: getType()
  summary: Тип условного формата. За один раз можно задать только один из них.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getType(): ConditionalFormatType;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormatType:enum" />
      description: ''
- name: setPriority(priority)
  uid: ExcelScript!ExcelScript.ConditionalFormat#setPriority:member(1)
  package: ExcelScript!
  fullName: setPriority(priority)
  summary: Приоритет (или индекс) в коллекции условного формата, в котором в настоящее время существует этот условный формат. Изменение этого параметра также изменяет приоритеты других условных форматов, чтобы обеспечить непрерывный порядок приоритетов. Используйте отрицательный приоритет, чтобы начать с обратной части. Приоритеты, превышающее границы, будут получаться и устанавливаться в максимальном (или минимальном, если отрицательном) приоритете. Также обратите внимание, что при изменении приоритета необходимо повторно получить новую копию объекта в этом новом расположении приоритета, если вы хотите внести в него дополнительные изменения.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setPriority(priority: number): void;'
    parameters:
    - id: priority
      description: ''
      type: number
    return:
      type: void
      description: ''
- name: setStopIfTrue(stopIfTrue)
  uid: ExcelScript!ExcelScript.ConditionalFormat#setStopIfTrue:member(1)
  package: ExcelScript!
  fullName: setStopIfTrue(stopIfTrue)
  summary: Если выполняются условия этого условного форматирования, форматы с более низким приоритетом не будут применяться в этой ячейке. Значение находится `null` на гистограммах, наборах значков и цветовых шкалах, `StopIfTrue` так как для них нет концепции.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setStopIfTrue(stopIfTrue: boolean): void;'
    parameters:
    - id: stopIfTrue
      description: ''
      type: boolean
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 343c48a1358746befb093936e24438d82c951d9f
  ms.sourcegitcommit: 224152865ad439182e63f5630f0f0aec589420a7
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 07/13/2022
  ms.locfileid: "66767100"
