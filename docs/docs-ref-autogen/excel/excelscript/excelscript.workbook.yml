### YamlMime:TSType
name: ExcelScript.Workbook
uid: ExcelScript!ExcelScript.Workbook:interface
package: ExcelScript!
fullName: ExcelScript.Workbook
summary: Workbook — это объект верхнего уровня, содержащий связанные объекты книг, например листы, таблицы, диапазоны и т. д.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: addBinding(range, bindingType, id)
  uid: ExcelScript!ExcelScript.Workbook#addBinding:member(1)
  package: ExcelScript!
  fullName: addBinding(range, bindingType, id)
  summary: Добавляет привязку к определенному объекту Range.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addBinding(
                  range: Range | string,
                  bindingType: BindingType,
                  id: string
              ): Binding;
    parameters:
    - id: range
      description: Диапазон для привязки. Это может быть определенный в Excel объект Range или строка. Строка должна включать полный адрес, включающий имя листа.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: bindingType
      description: Тип привязки. Обратитесь к разделу Ексцелскрипт. BindingType.
      type: <xref uid="ExcelScript!ExcelScript.BindingType:enum" />
    - id: id
      description: Имя привязки.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />
      description: ''
- name: addBindingFromNamedItem(name, bindingType, id)
  uid: ExcelScript!ExcelScript.Workbook#addBindingFromNamedItem:member(1)
  package: ExcelScript!
  fullName: addBindingFromNamedItem(name, bindingType, id)
  summary: Добавляет новую привязку с учетом именованного элемента в книге. Если именованный элемент ссылается на несколько областей, возвращается ошибка "Инвалидреференце".
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addBindingFromNamedItem(
                  name: string,
                  bindingType: BindingType,
                  id: string
              ): Binding;
    parameters:
    - id: name
      description: Имя элемента, на основе которого создается привязка.
      type: string
    - id: bindingType
      description: Тип привязки. Обратитесь к разделу Ексцелскрипт. BindingType.
      type: <xref uid="ExcelScript!ExcelScript.BindingType:enum" />
    - id: id
      description: Имя привязки.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />
      description: ''
- name: addBindingFromSelection(bindingType, id)
  uid: ExcelScript!ExcelScript.Workbook#addBindingFromSelection:member(1)
  package: ExcelScript!
  fullName: addBindingFromSelection(bindingType, id)
  summary: Добавляет новую привязку с учетом выделенного в настоящий момент фрагмента. Если выделенный фрагмент содержит несколько областей, возвращается ошибка "Инвалидреференце".
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addBindingFromSelection(bindingType: BindingType, id: string): Binding;'
    parameters:
    - id: bindingType
      description: Тип привязки. Обратитесь к разделу Ексцелскрипт. BindingType.
      type: <xref uid="ExcelScript!ExcelScript.BindingType:enum" />
    - id: id
      description: Имя привязки.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />
      description: ''
- name: addComment(cellAddress, content, contentType)
  uid: ExcelScript!ExcelScript.Workbook#addComment:member(1)
  package: ExcelScript!
  fullName: addComment(cellAddress, content, contentType)
  summary: Создает новое примечание с указанным содержимым в определенной ячейке. `InvalidArgument`Если указанный диапазон превышает одну ячейку, возникает ошибка.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addComment(
                  cellAddress: Range | string,
                  content: CommentRichContent | string,
                  contentType?: ContentType
              ): Comment;
    parameters:
    - id: cellAddress
      description: Ячейка, к которой добавляется комментарий. Это может быть объект Range или строка. Если это строка, она должна содержать полный адрес, включая имя листа. `InvalidArgument`Если указанный диапазон превышает одну ячейку, возникает ошибка.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: content
      description: Содержимое комментария. Это может быть объект String или Комментричконтент. Строки используются для обычного текста. Объекты Комментричконтент позволяют использовать другие функции комментариев, например упоминания.
      type: <xref uid="ExcelScript!ExcelScript.CommentRichContent:interface" /> | string
    - id: contentType
      description: Необязательный параметр. Тип контента, содержащегося в комментарии. Значение по умолчанию — enum `ContentType.Plain`<!-- -->.
      type: <xref uid="ExcelScript!ExcelScript.ContentType:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: addCustomXmlPart(xml)
  uid: ExcelScript!ExcelScript.Workbook#addCustomXmlPart:member(1)
  package: ExcelScript!
  fullName: addCustomXmlPart(xml)
  summary: Добавляет новую пользовательскую XML-часть в книгу.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addCustomXmlPart(xml: string): CustomXmlPart;'
    parameters:
    - id: xml
      description: XML-контент. Должен быть допустимым фрагментом XML.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />
      description: ''
- name: addNamedItem(name, reference, comment)
  uid: ExcelScript!ExcelScript.Workbook#addNamedItem:member(1)
  package: ExcelScript!
  fullName: addNamedItem(name, reference, comment)
  summary: Добавляет новое имя в определенную коллекцию.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addNamedItem(
                  name: string,
                  reference: Range | string,
                  comment?: string
              ): NamedItem;
    parameters:
    - id: name
      description: Имя именованного элемента.
      type: string
    - id: reference
      description: Формула или диапазон, на который будет ссылаться имя.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: comment
      description: Необязательный параметр. Комментарий, связанный с именованным элементом.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" />
      description: ''
- name: addNamedItemFormulaLocal(name, formula, comment)
  uid: ExcelScript!ExcelScript.Workbook#addNamedItemFormulaLocal:member(1)
  package: ExcelScript!
  fullName: addNamedItemFormulaLocal(name, formula, comment)
  summary: Добавляет новое имя в определенную коллекцию, используя языковой стандарт пользователя для формулы.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addNamedItemFormulaLocal(
                  name: string,
                  formula: string,
                  comment?: string
              ): NamedItem;
    parameters:
    - id: name
      description: Имя именованного элемента.
      type: string
    - id: formula
      description: Формула на языке пользователя, на которую будет ссылаться имя.
      type: string
    - id: comment
      description: Необязательный параметр. Комментарий, связанный с именованным элементом.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" />
      description: ''
- name: addPivotTable(name, source, destination)
  uid: ExcelScript!ExcelScript.Workbook#addPivotTable:member(1)
  package: ExcelScript!
  fullName: addPivotTable(name, source, destination)
  summary: Добавьте сводную таблицу на основе указанных исходных данных и вставьте ее в верхнюю левую ячейку конечного диапазона.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addPivotTable(
                  name: string,
                  source: Range | string | Table,
                  destination: Range | string
              ): PivotTable;
    parameters:
    - id: name
      description: Имя новой сводной таблицы.
      type: string
    - id: source
      description: Исходные данные для новой сводной таблицы, может быть диапазоном (или строковым адресом, включая имя листа) или таблицей.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string | <xref uid="ExcelScript!ExcelScript.Table:interface" />
    - id: destination
      description: Ячейка в левом верхнем углу диапазона назначения отчета сводной таблицы (диапазон на листе, на котором будет помещен итоговый отчет).
      type: "<xref uid=\"ExcelScript!ExcelScript.Range:interface\" /> | string\n        "
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" />
      description: ''
- name: addPivotTableStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: addPivotTableStyle(name, makeUniqueName)
  summary: Создает пустой объект PivotTableStyle с указанным именем.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addPivotTableStyle(
                  name: string,
                  makeUniqueName?: boolean
              ): PivotTableStyle;
    parameters:
    - id: name
      description: Уникальное имя нового Пивоттаблестиле. Если имя уже используется, будет выдаваться исключение недопустимого аргумента.
      type: string
    - id: makeUniqueName
      description: Необязательный параметр, по умолчанию — false. Если этот параметр имеет значение true, то в случае необходимости можно присоединить номера к имени, чтобы сделать его уникальным.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" />
      description: ''
- name: addPredefinedCellStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#addPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: addPredefinedCellStyle(name)
  summary: Добавляет новый стиль в коллекцию.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addPredefinedCellStyle(name: string): void;'
    parameters:
    - id: name
      description: Имя добавляемого стиля.
      type: string
    return:
      type: void
      description: ''
- name: addSlicer(slicerSource, sourceField, slicerDestination)
  uid: ExcelScript!ExcelScript.Workbook#addSlicer:member(1)
  package: ExcelScript!
  fullName: addSlicer(slicerSource, sourceField, slicerDestination)
  summary: Добавляет новый срез в книгу.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addSlicer(
                  slicerSource: string | PivotTable | Table,
                  sourceField: string | PivotField | number | TableColumn,
                  slicerDestination?: string | Worksheet
              ): Slicer;
    parameters:
    - id: slicerSource
      description: Источник данных, на котором будет основан новый срез. Это может быть объект PivotTable, объект Table или строка. Когда объект сводной таблицы передается, источником данных является источник объекта сводной таблицы. Когда передается объект Table, источником данных является объект Table. Когда строка передается, она интерпретируется как имя/идентификатор сводной таблицы или таблицы.
      type: string | <xref uid="ExcelScript!ExcelScript.PivotTable:interface" /> | <xref uid="ExcelScript!ExcelScript.Table:interface" />
    - id: sourceField
      description: Поле в источнике данных, по которому выполняется фильтрация. Это может быть объект PivotField, объект TableColumn, идентификатор PivotField или идентификатор и имя TableColumn.
      type: string | <xref uid="ExcelScript!ExcelScript.PivotField:interface" /> | number | <xref uid="ExcelScript!ExcelScript.TableColumn:interface" />
    - id: slicerDestination
      description: Необязательный параметр. Лист, в котором будет создан новый срез. Это может быть объект листа или имя или идентификатор листа. Этот параметр можно опустить, если коллекция срезов извлекается из листа.
      type: string | <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" />
      description: ''
- name: addSlicerStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addSlicerStyle:member(1)
  package: ExcelScript!
  fullName: addSlicerStyle(name, makeUniqueName)
  summary: Создает пустой объект SlicerStyle с указанным именем.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addSlicerStyle(name: string, makeUniqueName?: boolean): SlicerStyle;'
    parameters:
    - id: name
      description: Уникальное имя нового Слицерстиле. Если имя уже используется, будет выдаваться исключение недопустимого аргумента.
      type: string
    - id: makeUniqueName
      description: Необязательный параметр, по умолчанию — false. Если этот параметр имеет значение true, то в случае необходимости можно присоединить номера к имени, чтобы сделать его уникальным.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" />
      description: ''
- name: addTable(address, hasHeaders)
  uid: ExcelScript!ExcelScript.Workbook#addTable:member(1)
  package: ExcelScript!
  fullName: addTable(address, hasHeaders)
  summary: Создание таблицы. Объект или исходный адрес диапазона определяет лист, на который будет добавлена таблица. Если добавить таблицу не удается (например, если адрес недействителен или одна таблица будет перекрываться другой), выводится сообщение об ошибке.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTable(address: Range | string, hasHeaders: boolean): Table;'
    parameters:
    - id: address
      description: Объект Range, строковый адрес или имя диапазона, представляющего источник данных. Если адрес не содержит имя листа, используется текущий активный лист.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: hasHeaders
      description: Логическое значение, указывающее, имеют ли импортируемые данные метки столбцов. Если источник не содержит заголовков (например, если этому свойству присвоено значение false), Excel автоматически создаст заголовок и сдвинет данные на одну строку вниз.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" />
      description: ''
- name: addTableStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addTableStyle:member(1)
  package: ExcelScript!
  fullName: addTableStyle(name, makeUniqueName)
  summary: Создает пустой объект TableStyle с указанным именем.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTableStyle(name: string, makeUniqueName?: boolean): TableStyle;'
    parameters:
    - id: name
      description: Уникальное имя нового TableStyle. Если имя уже используется, будет выдаваться исключение недопустимого аргумента.
      type: string
    - id: makeUniqueName
      description: Необязательный параметр, по умолчанию — false. Если этот параметр имеет значение true, то в случае необходимости можно присоединить номера к имени, чтобы сделать его уникальным.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" />
      description: ''
- name: addTimelineStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addTimelineStyle:member(1)
  package: ExcelScript!
  fullName: addTimelineStyle(name, makeUniqueName)
  summary: Создает пустой объект TimelineStyle с указанным именем.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTimelineStyle(name: string, makeUniqueName?: boolean): TimelineStyle;'
    parameters:
    - id: name
      description: Уникальное имя нового Тимелинестиле. Если имя уже используется, будет выдаваться исключение недопустимого аргумента.
      type: string
    - id: makeUniqueName
      description: Необязательный параметр, по умолчанию — false. Если этот параметр имеет значение true, то в случае необходимости можно присоединить номера к имени, чтобы сделать его уникальным.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" />
      description: ''
- name: addWorksheet(name)
  uid: ExcelScript!ExcelScript.Workbook#addWorksheet:member(1)
  package: ExcelScript!
  fullName: addWorksheet(name)
  summary: Добавляет новый лист в книгу. Лист будет добавлен в конец набора имеющихся листов. Если вы хотите активировать только что добавленный лист, вызовите команду .activate().
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addWorksheet(name?: string): Worksheet;'
    parameters:
    - id: name
      description: Необязательный параметр. Имя добавляемого листа. Если параметр используется, имя должно быть уникальным. В противном случае Excel определяет имя нового листа.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getActiveCell()
  uid: ExcelScript!ExcelScript.Workbook#getActiveCell:member(1)
  package: ExcelScript!
  fullName: getActiveCell()
  summary: Получает текущую активную ячейку из книги.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveCell(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n/**\n * This script logs the value of the current active cell. \n * If multiple cells are selected, the top-leftmost cell will be logged.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current active cell in the workbook.\n  let cell = workbook.getActiveCell();\n  console.log(`The current cell's value is ${cell.getValue()}`);\n}\n```"
- name: getActiveChart()
  uid: ExcelScript!ExcelScript.Workbook#getActiveChart:member(1)
  package: ExcelScript!
  fullName: getActiveChart()
  summary: Получает текущую активную диаграмму в книге. Если нет активной диаграммы, возвращается нулевой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveChart(): Chart;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Chart:interface" />
      description: ''
- name: getActiveSlicer()
  uid: ExcelScript!ExcelScript.Workbook#getActiveSlicer:member(1)
  package: ExcelScript!
  fullName: getActiveSlicer()
  summary: Получает текущий активный срез в книге. Если активный срез отсутствует, возвращается пустой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveSlicer(): Slicer;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" />
      description: ''
- name: getActiveWorksheet()
  uid: ExcelScript!ExcelScript.Workbook#getActiveWorksheet:member(1)
  package: ExcelScript!
  fullName: getActiveWorksheet()
  summary: Получает текущий активный лист в книге.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveWorksheet(): Worksheet;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getApplication()
  uid: ExcelScript!ExcelScript.Workbook#getApplication:member(1)
  package: ExcelScript!
  fullName: getApplication()
  summary: Представляет экземпляр приложения Excel, который содержит эту книгу.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getApplication(): Application;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Application:interface" />
      description: ''
- name: getAutoSave()
  uid: ExcelScript!ExcelScript.Workbook#getAutoSave:member(1)
  package: ExcelScript!
  fullName: getAutoSave()
  summary: Указывает, находится ли книга в режиме автосохранения.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAutoSave(): boolean;'
    return:
      type: boolean
      description: ''
- name: getBinding(id)
  uid: ExcelScript!ExcelScript.Workbook#getBinding:member(1)
  package: ExcelScript!
  fullName: getBinding(id)
  summary: Получает объект привязки по идентификатору. Если объект привязки не существует, возвращает пустой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBinding(id: string): Binding | undefined;'
    parameters:
    - id: id
      description: Идентификатор получаемого объекта привязки.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" /> | undefined
      description: ''
- name: getBindings()
  uid: ExcelScript!ExcelScript.Workbook#getBindings:member(1)
  package: ExcelScript!
  fullName: getBindings()
  summary: Представляет коллекцию привязок, включенных в книгу.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBindings(): Binding[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />[]
      description: ''
- name: getCalculationEngineVersion()
  uid: ExcelScript!ExcelScript.Workbook#getCalculationEngineVersion:member(1)
  package: ExcelScript!
  fullName: getCalculationEngineVersion()
  summary: Возвращает номер версии модуля вычислений Excel.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCalculationEngineVersion(): number;'
    return:
      type: number
      description: ''
- name: getChartDataPointTrack()
  uid: ExcelScript!ExcelScript.Workbook#getChartDataPointTrack:member(1)
  package: ExcelScript!
  fullName: getChartDataPointTrack()
  summary: Значение true, если все диаграммы в книге отслеживают точки фактических данных, с которыми они связаны. False, если диаграммы отслеживают индекс точек данных.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getChartDataPointTrack(): boolean;'
    return:
      type: boolean
      description: ''
- name: getComment(commentId)
  uid: ExcelScript!ExcelScript.Workbook#getComment:member(1)
  package: ExcelScript!
  fullName: getComment(commentId)
  summary: Получает примечание из коллекции на основе его идентификатора.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getComment(commentId: string): Comment;'
    parameters:
    - id: commentId
      description: Идентификатор комментария.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: getCommentByCell(cellAddress)
  uid: ExcelScript!ExcelScript.Workbook#getCommentByCell:member(1)
  package: ExcelScript!
  fullName: getCommentByCell(cellAddress)
  summary: Получает примечание из указанной ячейки.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCommentByCell(cellAddress: Range | string): Comment;'
    parameters:
    - id: cellAddress
      description: Ячейка, в которой находится комментарий. Это может быть объект Range или строка. Если это строка, она должна содержать полный адрес, включая имя листа. `InvalidArgument`Если указанный диапазон превышает одну ячейку, возникает ошибка.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: getCommentByReplyId(replyId)
  uid: ExcelScript!ExcelScript.Workbook#getCommentByReplyId:member(1)
  package: ExcelScript!
  fullName: getCommentByReplyId(replyId)
  summary: Получает комментарий, к которому подключен данный ответ.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCommentByReplyId(replyId: string): Comment;'
    parameters:
    - id: replyId
      description: Идентификатор ответа на комментарий.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: getComments()
  uid: ExcelScript!ExcelScript.Workbook#getComments:member(1)
  package: ExcelScript!
  fullName: getComments()
  summary: Представляет коллекцию примечаний, связанных с книгой.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getComments(): Comment[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />[]
      description: ''
- name: getCustomXmlPart(id)
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlPart:member(1)
  package: ExcelScript!
  fullName: getCustomXmlPart(id)
  summary: Получает пользовательскую XML-часть по идентификатору. Если CustomXmlPart не существует, свойство isNull возвращаемого объекта будет иметь значение true.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustomXmlPart(id: string): CustomXmlPart | undefined;'
    parameters:
    - id: id
      description: ИДЕНТИФИКАТОР получаемого объекта.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" /> | undefined
      description: ''
- name: getCustomXmlPartByNamespace(namespaceUri)
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlPartByNamespace:member(1)
  package: ExcelScript!
  fullName: getCustomXmlPartByNamespace(namespaceUri)
  summary: Получает новую ограниченную коллекцию пользовательских XML-частей, пространства имен которых совпадают с указанным пространством имен.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustomXmlPartByNamespace(namespaceUri: string): CustomXmlPart[];'
    parameters:
    - id: namespaceUri
      description: Это должен быть полный URI схемы; Например, " http://schemas.contoso.com/review/1.0 ".
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />[]
      description: ''
- name: getCustomXmlParts()
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlParts:member(1)
  package: ExcelScript!
  fullName: getCustomXmlParts()
  summary: Представляет коллекцию настраиваемых XML-частей, которые содержит эта книга.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustomXmlParts(): CustomXmlPart[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />[]
      description: ''
- name: getDefaultPivotTableStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultPivotTableStyle()
  summary: Получает используемый по умолчанию объект PivotTableStyle для области родительского объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultPivotTableStyle(): PivotTableStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" />
      description: ''
- name: getDefaultSlicerStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultSlicerStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultSlicerStyle()
  summary: Получает используемый по умолчанию объект SlicerStyle для области родительского объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultSlicerStyle(): SlicerStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" />
      description: ''
- name: getDefaultTableStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultTableStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultTableStyle()
  summary: Получает используемый по умолчанию объект TableStyle для области родительского объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultTableStyle(): TableStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" />
      description: ''
- name: getDefaultTimelineStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultTimelineStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultTimelineStyle()
  summary: Получает используемый по умолчанию объект TimelineStyle для области родительского объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultTimelineStyle(): TimelineStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" />
      description: ''
- name: getFirstWorksheet(visibleOnly)
  uid: ExcelScript!ExcelScript.Workbook#getFirstWorksheet:member(1)
  package: ExcelScript!
  fullName: getFirstWorksheet(visibleOnly)
  summary: Получает первый лист в коллекции.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFirstWorksheet(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Необязательный параметр. Если задано значение true, учитываются только видимые листы, пропуская все скрытые.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getIsDirty()
  uid: ExcelScript!ExcelScript.Workbook#getIsDirty:member(1)
  package: ExcelScript!
  fullName: getIsDirty()
  summary: Указывает, были ли внесены изменения с момента последнего сохранения книги. Для этого свойства можно задать значение true, если нужно закрыть измененную книгу без сохранения или выдачи запроса на сохранение.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIsDirty(): boolean;'
    return:
      type: boolean
      description: ''
- name: getLastWorksheet(visibleOnly)
  uid: ExcelScript!ExcelScript.Workbook#getLastWorksheet:member(1)
  package: ExcelScript!
  fullName: getLastWorksheet(visibleOnly)
  summary: Получает последний лист в коллекции.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastWorksheet(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Необязательный параметр. Если задано значение true, учитываются только видимые листы, пропуская все скрытые.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getName()
  uid: ExcelScript!ExcelScript.Workbook#getName:member(1)
  package: ExcelScript!
  fullName: getName()
  summary: Получает имя книги.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getName(): string;'
    return:
      type: string
      description: ''
- name: getNamedItem(name)
  uid: ExcelScript!ExcelScript.Workbook#getNamedItem:member(1)
  package: ExcelScript!
  fullName: getNamedItem(name)
  summary: Возвращает объект NamedItem, используя его имя. Если объект nameditem не существует, возвращает пустой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNamedItem(name: string): NamedItem | undefined;'
    parameters:
    - id: name
      description: Имя NamedItem.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" /> | undefined
      description: ''
- name: getNames()
  uid: ExcelScript!ExcelScript.Workbook#getNames:member(1)
  package: ExcelScript!
  fullName: getNames()
  summary: Представляет коллекцию именованных элементов в книге (именованные диапазоны и константы).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNames(): NamedItem[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" />[]
      description: ''
- name: getPivotTable(name)
  uid: ExcelScript!ExcelScript.Workbook#getPivotTable:member(1)
  package: ExcelScript!
  fullName: getPivotTable(name)
  summary: Получает сводную таблицу по имени. Если сводная таблица не существует, возвращает пустой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTable(name: string): PivotTable | undefined;'
    parameters:
    - id: name
      description: Имя получаемой сводной таблицы.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" /> | undefined
      description: ''
- name: getPivotTables()
  uid: ExcelScript!ExcelScript.Workbook#getPivotTables:member(1)
  package: ExcelScript!
  fullName: getPivotTables()
  summary: Представляет коллекцию сводных таблиц, сопоставленных с книгой.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTables(): PivotTable[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" />[]
      description: ''
- name: getPivotTableStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: getPivotTableStyle(name)
  summary: Получает объект PivotTableStyle по имени. Если объект PivotTableStyle не существует, возвращает пустой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTableStyle(name: string): PivotTableStyle | undefined;'
    parameters:
    - id: name
      description: Имя извлекаемого Пивоттаблестиле.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" /> | undefined
      description: ''
- name: getPivotTableStyles()
  uid: ExcelScript!ExcelScript.Workbook#getPivotTableStyles:member(1)
  package: ExcelScript!
  fullName: getPivotTableStyles()
  summary: Представляет коллекцию объектов PivotTableStyles, связанных с книгой.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTableStyles(): PivotTableStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" />[]
      description: ''
- name: getPredefinedCellStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: getPredefinedCellStyle(name)
  summary: Получает стиль по имени.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPredefinedCellStyle(name: string): PredefinedCellStyle;'
    parameters:
    - id: name
      description: Имя извлекаемого стиля.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PredefinedCellStyle:interface" />
      description: ''
- name: getPredefinedCellStyles()
  uid: ExcelScript!ExcelScript.Workbook#getPredefinedCellStyles:member(1)
  package: ExcelScript!
  fullName: getPredefinedCellStyles()
  summary: Представляет коллекцию стилей, связанных с книгой.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPredefinedCellStyles(): PredefinedCellStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PredefinedCellStyle:interface" />[]
      description: ''
- name: getPreviouslySaved()
  uid: ExcelScript!ExcelScript.Workbook#getPreviouslySaved:member(1)
  package: ExcelScript!
  fullName: getPreviouslySaved()
  summary: Указывает, была ли книга ранее сохранена локально или в сети.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreviouslySaved(): boolean;'
    return:
      type: boolean
      description: ''
- name: getProperties()
  uid: ExcelScript!ExcelScript.Workbook#getProperties:member(1)
  package: ExcelScript!
  fullName: getProperties()
  summary: Получает свойства книги.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProperties(): DocumentProperties;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DocumentProperties:interface" />
      description: ''
- name: getProtection()
  uid: ExcelScript!ExcelScript.Workbook#getProtection:member(1)
  package: ExcelScript!
  fullName: getProtection()
  summary: Возвращает объект защиты для книги.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProtection(): WorkbookProtection;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.WorkbookProtection:interface" />
      description: ''
- name: getReadOnly()
  uid: ExcelScript!ExcelScript.Workbook#getReadOnly:member(1)
  package: ExcelScript!
  fullName: getReadOnly()
  summary: Значение true, если книга открыта в режиме только для чтения.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getReadOnly(): boolean;'
    return:
      type: boolean
      description: ''
- name: getSelectedRange()
  uid: ExcelScript!ExcelScript.Workbook#getSelectedRange:member(1)
  package: ExcelScript!
  fullName: getSelectedRange()
  summary: Получает текущий выделенный диапазон из книги. Если выбрано несколько диапазонов, этот метод выдаст ошибку.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRange(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSelectedRanges()
  uid: ExcelScript!ExcelScript.Workbook#getSelectedRanges:member(1)
  package: ExcelScript!
  fullName: getSelectedRanges()
  summary: Получает текущий выделенный диапазон (один или несколько) в книге. В отличие от getSelectedRange() этот метод возвращает объект RangeAreas, представляющий все выделенные диапазоны.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRanges(): RangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getSlicer(key)
  uid: ExcelScript!ExcelScript.Workbook#getSlicer:member(1)
  package: ExcelScript!
  fullName: getSlicer(key)
  summary: Получает срез по его имени или ИД. Если срез не существует, возвращает пустой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicer(key: string): Slicer | undefined;'
    parameters:
    - id: key
      description: Имя или идентификатор среза, который требуется получить.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" /> | undefined
      description: ''
- name: getSlicers()
  uid: ExcelScript!ExcelScript.Workbook#getSlicers:member(1)
  package: ExcelScript!
  fullName: getSlicers()
  summary: Представляет коллекцию срезов, связанных с книгой.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicers(): Slicer[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" />[]
      description: ''
- name: getSlicerStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getSlicerStyle:member(1)
  package: ExcelScript!
  fullName: getSlicerStyle(name)
  summary: Получает объект SlicerStyle по имени. Если объект SlicerStyle не существует, возвращает пустой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicerStyle(name: string): SlicerStyle | undefined;'
    parameters:
    - id: name
      description: Имя извлекаемого Слицерстиле.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" /> | undefined
      description: ''
- name: getSlicerStyles()
  uid: ExcelScript!ExcelScript.Workbook#getSlicerStyles:member(1)
  package: ExcelScript!
  fullName: getSlicerStyles()
  summary: Представляет коллекцию объектов SlicerStyles, связанных с книгой.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicerStyles(): SlicerStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" />[]
      description: ''
- name: getTable(key)
  uid: ExcelScript!ExcelScript.Workbook#getTable:member(1)
  package: ExcelScript!
  fullName: getTable(key)
  summary: Получает таблицу по имени или ИД. Если таблица не существует, возвращает пустой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTable(key: string): Table | undefined;'
    parameters:
    - id: key
      description: Имя или ИД получаемой таблицы.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" /> | undefined
      description: ''
- name: getTables()
  uid: ExcelScript!ExcelScript.Workbook#getTables:member(1)
  package: ExcelScript!
  fullName: getTables()
  summary: Представляет коллекцию таблиц, сопоставленных с книгой.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTables(): Table[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" />[]
      description: ''
- name: getTableStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getTableStyle:member(1)
  package: ExcelScript!
  fullName: getTableStyle(name)
  summary: Получает объект TableStyle по имени. Если объект TableStyle не существует, возвращает пустой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTableStyle(name: string): TableStyle | undefined;'
    parameters:
    - id: name
      description: Имя извлекаемого TableStyle.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" /> | undefined
      description: ''
- name: getTableStyles()
  uid: ExcelScript!ExcelScript.Workbook#getTableStyles:member(1)
  package: ExcelScript!
  fullName: getTableStyles()
  summary: Представляет коллекцию объектов TableStyles, связанных с книгой.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTableStyles(): TableStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" />[]
      description: ''
- name: getTimelineStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getTimelineStyle:member(1)
  package: ExcelScript!
  fullName: getTimelineStyle(name)
  summary: Получает объект TimelineStyle по имени. Если объект TimelineStyle не существует, возвращает пустой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTimelineStyle(name: string): TimelineStyle | undefined;'
    parameters:
    - id: name
      description: Имя извлекаемого Тимелинестиле.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" /> | undefined
      description: ''
- name: getTimelineStyles()
  uid: ExcelScript!ExcelScript.Workbook#getTimelineStyles:member(1)
  package: ExcelScript!
  fullName: getTimelineStyles()
  summary: Представляет коллекцию объектов TimelineStyles, связанных с книгой.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTimelineStyles(): TimelineStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" />[]
      description: ''
- name: getUsePrecisionAsDisplayed()
  uid: ExcelScript!ExcelScript.Workbook#getUsePrecisionAsDisplayed:member(1)
  package: ExcelScript!
  fullName: getUsePrecisionAsDisplayed()
  summary: Значение true, если вычисления в книге выполняются только с той точностью чисел, с которой они отображаются. При переключении этого свойства с false на true данные будут безвозвратно потеряны.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsePrecisionAsDisplayed(): boolean;'
    return:
      type: boolean
      description: ''
- name: getWorksheet(key)
  uid: ExcelScript!ExcelScript.Workbook#getWorksheet:member(1)
  package: ExcelScript!
  fullName: getWorksheet(key)
  summary: Получает объект листа по его имени или ИД. Если лист не существует, возвращает пустой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWorksheet(key: string): Worksheet | undefined;'
    parameters:
    - id: key
      description: Имя или ИД листа.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" /> | undefined
      description: ''
- name: getWorksheets()
  uid: ExcelScript!ExcelScript.Workbook#getWorksheets:member(1)
  package: ExcelScript!
  fullName: getWorksheets()
  summary: Представляет коллекцию листов, сопоставленных с книгой.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWorksheets(): Worksheet[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />[]
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n/**\n * This script logs the names of all the worksheets in the workbook.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get all the worksheets in the workbook. \n  let sheets = workbook.getWorksheets();\n\n  // Get a list of all the worksheet names.\n  let names = sheets.map ((sheet) => sheet.getName());\n\n  // Write in the console all the worksheet names and the total count.\n  console.log(names);\n  console.log(`Total worksheets inside of this workbook: ${sheets.length}`);\n}\n```"
- name: refreshAllDataConnections()
  uid: ExcelScript!ExcelScript.Workbook#refreshAllDataConnections:member(1)
  package: ExcelScript!
  fullName: refreshAllDataConnections()
  summary: Обновляет все подключения к данным.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refreshAllDataConnections(): void;'
    return:
      type: void
      description: ''
- name: refreshAllPivotTables()
  uid: ExcelScript!ExcelScript.Workbook#refreshAllPivotTables:member(1)
  package: ExcelScript!
  fullName: refreshAllPivotTables()
  summary: Обновляет все сводные таблицы в коллекции.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refreshAllPivotTables(): void;'
    return:
      type: void
      description: ''
- name: setChartDataPointTrack(chartDataPointTrack)
  uid: ExcelScript!ExcelScript.Workbook#setChartDataPointTrack:member(1)
  package: ExcelScript!
  fullName: setChartDataPointTrack(chartDataPointTrack)
  summary: Значение true, если все диаграммы в книге отслеживают точки фактических данных, с которыми они связаны. False, если диаграммы отслеживают индекс точек данных.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setChartDataPointTrack(chartDataPointTrack: boolean): void;'
    parameters:
    - id: chartDataPointTrack
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setDefaultPivotTableStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultPivotTableStyle(newDefaultStyle)
  summary: Задает объект PivotTableStyle, используемый по умолчанию в области родительского объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      setDefaultPivotTableStyle(
                  newDefaultStyle: PivotTableStyle | string
              ): void;
    parameters:
    - id: newDefaultStyle
      description: Объект Пивоттаблестиле или имя объекта Пивоттаблестиле, который должен быть новым значением по умолчанию.
      type: "<xref uid=\"ExcelScript!ExcelScript.PivotTableStyle:interface\" /> | string\n        "
    return:
      type: void
      description: ''
- name: setDefaultSlicerStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultSlicerStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultSlicerStyle(newDefaultStyle)
  summary: Задает объект SlicerStyle, используемый по умолчанию в области родительского объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDefaultSlicerStyle(newDefaultStyle: SlicerStyle | string): void;'
    parameters:
    - id: newDefaultStyle
      description: Объект Слицерстиле или имя объекта Слицерстиле, который должен быть новым значением по умолчанию.
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setDefaultTableStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultTableStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultTableStyle(newDefaultStyle)
  summary: Задает объект TableStyle, используемый по умолчанию в области родительского объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDefaultTableStyle(newDefaultStyle: TableStyle | string): void;'
    parameters:
    - id: newDefaultStyle
      description: Объект TableStyle или имя объекта TableStyle, который должен быть новым значением по умолчанию.
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setDefaultTimelineStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultTimelineStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultTimelineStyle(newDefaultStyle)
  summary: Задает объект TimelineStyle, используемый по умолчанию в области родительского объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDefaultTimelineStyle(newDefaultStyle: TimelineStyle | string): void;'
    parameters:
    - id: newDefaultStyle
      description: Объект Тимелинестиле или имя объекта Тимелинестиле, который должен быть новым значением по умолчанию.
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setIsDirty(isDirty)
  uid: ExcelScript!ExcelScript.Workbook#setIsDirty:member(1)
  package: ExcelScript!
  fullName: setIsDirty(isDirty)
  summary: Указывает, были ли внесены изменения с момента последнего сохранения книги. Для этого свойства можно задать значение true, если нужно закрыть измененную книгу без сохранения или выдачи запроса на сохранение.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setIsDirty(isDirty: boolean): void;'
    parameters:
    - id: isDirty
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setUsePrecisionAsDisplayed(usePrecisionAsDisplayed)
  uid: ExcelScript!ExcelScript.Workbook#setUsePrecisionAsDisplayed:member(1)
  package: ExcelScript!
  fullName: setUsePrecisionAsDisplayed(usePrecisionAsDisplayed)
  summary: Значение true, если вычисления в книге выполняются только с той точностью чисел, с которой они отображаются. При переключении этого свойства с false на true данные будут безвозвратно потеряны.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setUsePrecisionAsDisplayed(usePrecisionAsDisplayed: boolean): void;'
    parameters:
    - id: usePrecisionAsDisplayed
      description: ''
      type: boolean
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 63c89957d0a69f7f4c53440e74567153a98cc4bb
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49419252"
