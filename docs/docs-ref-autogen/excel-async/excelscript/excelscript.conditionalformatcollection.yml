### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalFormatCollection:interface'
    summary: 'Представляет коллекцию всех условных форматов, которые перекрывают диапазон.'
    name: Excel.ConditionalFormatCollection
    fullName: Excel.ConditionalFormatCollection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.ConditionalFormatCollection#add:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#clearAll:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#getCount:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#getItem:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#getItemAt:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#load:member(1)'
  - uid: 'excel!Excel.ConditionalFormatCollection#add:member(1)'
    summary: Добавляет новое условное форматирование в коллекцию по первому или верхнему приоритету.
    name: add(type)
    fullName: add(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(type: ConditionalFormatType): ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:interface'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:M5");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              let criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          }
          ```
      parameters:
        - id: type
          description: Тип добавляемого условного форматирования. Дополнительные сведения см. в статье Excel. Кондитионалформаттипе.
          type:
            - 'excel!Excel.ConditionalFormatType:enum'
  - uid: 'excel!Excel.ConditionalFormatCollection#clearAll:member(1)'
    summary: Полное удаление условного форматирование в указанном диапазоне.
    name: clearAll()
    fullName: clearAll()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAll(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange();
              range.conditionalFormats.clearAll();

              await context.sync();

              $(".conditional-formats").hide();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormatCollection#getCount:member(1)'
    summary: Возвращает число условных форматов в книге.
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'excel!Excel.ConditionalFormatCollection#getItem:member(1)'
    summary: Возвращает условное форматирование для указанного идентификатора.
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:interface'
        description: ''
      parameters:
        - id: id
          description: Идентификатор условного форматирования.
          type:
            - string
  - uid: 'excel!Excel.ConditionalFormatCollection#getItemAt:member(1)'
    summary: Возвращает условное форматирование по индексу.
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:interface'
        description: ''
      parameters:
        - id: index
          description: 'Индекс условных форматов, которые необходимо получить.'
          type:
            - number
  - uid: 'excel!Excel.ConditionalFormatCollection#load:member(1)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. `context.sync()`Перед чтением свойств необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.ConditionalFormat:interface'
    name: ConditionalFormat
    fullName: Excel.ConditionalFormat
  - uid: 'excel!Excel.ConditionalFormatType:enum'
    name: ConditionalFormatType
    fullName: Excel.ConditionalFormatType