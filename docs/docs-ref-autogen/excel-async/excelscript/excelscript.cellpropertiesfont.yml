### YamlMime:TSType
name: Excel.CellPropertiesFont
uid: excel!Excel.CellPropertiesFont:interface
package: excel!
fullName: Excel.CellPropertiesFont
summary: Представляет `format.font` свойства объекта `getCellProperties`<!-- -->, `getRowProperties`<!-- -->, а `getColumnProperties` также `format.font` входной параметр `setCellProperties`<!-- -->, `setRowProperties`<!-- -->, а `setColumnProperties`<!-- -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: bold
  uid: excel!Excel.CellPropertiesFont#bold:member
  package: excel!
  fullName: bold
  summary: Представляет свойство `format.font.bold`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'bold?: boolean;'
    return:
      type: boolean
- name: color
  uid: excel!Excel.CellPropertiesFont#color:member
  package: excel!
  fullName: color
  summary: Представляет свойство `format.font.color`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'color?: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Creating the SettableCellProperties objects to use for the range.\n    // In your add-in, these should be created once, outside the function.\n    let topHeaderProps: Excel.SettableCellProperties = {\n        // The style property takes a string matching the name of an Excel style.\n        // Built-in style names are listed in the `BuiltInStyle` enum.\n        // Note that a style will overwrite any formatting,\n        // so do not use the format property with the style property.\n        style: \"Heading1\"\n    };\n\n    let headerProps: Excel.SettableCellProperties = {\n        // Any subproperties of format that are not set will not be changed when these cell properties are set.\n        format: {\n            fill: {\n                color: \"Blue\"\n            },\n            font: {\n                color: \"White\",\n                bold: true\n            }\n        }\n    };\n\n    let nonApplicableProps: Excel.SettableCellProperties = {\n        format: {\n            fill: {\n                pattern: Excel.FillPattern.gray25\n            },\n            font: {\n                color: \"Gray\",\n                italic: true\n            }\n        }\n    };\n\n    let matchupScoreProps: Excel.SettableCellProperties = {\n        format: {\n            borders: {\n                bottom: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                left: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                right: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                top: {\n                    style: Excel.BorderLineStyle.continuous\n                }\n            }\n        }\n    };\n\n    let range = sheet.getRange(\"A1:E5\");\n\n    // You can use empty JSON objects to avoid changing a cell's properties.\n    range.setCellProperties([\n        [topHeaderProps, {}, {}, {}, {}],\n        [{}, {}, headerProps, headerProps, headerProps],\n        [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],\n        [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],\n        [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]\n    ]);\n\n    sheet.getUsedRange().format.autofitColumns();\n    await context.sync();\n}\n```"
- name: italic
  uid: excel!Excel.CellPropertiesFont#italic:member
  package: excel!
  fullName: italic
  summary: Представляет свойство `format.font.italic`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'italic?: boolean;'
    return:
      type: boolean
- name: name
  uid: excel!Excel.CellPropertiesFont#name:member
  package: excel!
  fullName: name
  summary: Представляет свойство `format.font.name`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name?: string;'
    return:
      type: string
- name: size
  uid: excel!Excel.CellPropertiesFont#size:member
  package: excel!
  fullName: size
  summary: Представляет свойство `format.font.size`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'size?: number;'
    return:
      type: number
- name: strikethrough
  uid: excel!Excel.CellPropertiesFont#strikethrough:member
  package: excel!
  fullName: strikethrough
  summary: Представляет свойство `format.font.strikethrough`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'strikethrough?: boolean;'
    return:
      type: boolean
- name: subscript
  uid: excel!Excel.CellPropertiesFont#subscript:member
  package: excel!
  fullName: subscript
  summary: Представляет свойство `format.font.subscript`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'subscript?: boolean;'
    return:
      type: boolean
- name: superscript
  uid: excel!Excel.CellPropertiesFont#superscript:member
  package: excel!
  fullName: superscript
  summary: Представляет свойство `format.font.superscript`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'superscript?: boolean;'
    return:
      type: boolean
- name: tintAndShade
  uid: excel!Excel.CellPropertiesFont#tintAndShade:member
  package: excel!
  fullName: tintAndShade
  summary: Представляет свойство `format.font.tintAndShade`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'tintAndShade?: number;'
    return:
      type: number
- name: underline
  uid: excel!Excel.CellPropertiesFont#underline:member
  package: excel!
  fullName: underline
  summary: Представляет свойство `format.font.underline`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      underline?:
                  | RangeUnderlineStyle
                  | "None"
                  | "Single"
                  | "Double"
                  | "SingleAccountant"
                  | "DoubleAccountant";
    return:
      type: >-
        | <xref uid="excel!Excel.RangeUnderlineStyle:enum" />
                    | "None"
                    | "Single"
                    | "Double"
                    | "SingleAccountant"
                    | "DoubleAccountant"
metadata:
  ms.openlocfilehash: 78b7a224a5e4049cf9359c0f946959dfe68312e3
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49413771"
