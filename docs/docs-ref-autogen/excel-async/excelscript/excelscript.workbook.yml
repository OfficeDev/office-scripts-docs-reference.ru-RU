### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Workbook:interface'
    summary: 'Workbook — это объект верхнего уровня, содержащий связанные объекты книг, такие как листы, таблицы, диапазоны и т. д. Чтобы узнать больше об объектной модели книги, читайте [работу с книгами с помощью API JavaScript для Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-workbooks)<!-- -->.'
    name: Excel.Workbook
    fullName: Excel.Workbook
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.Workbook#application:member'
      - 'excel!Excel.Workbook#autoSave:member'
      - 'excel!Excel.Workbook#bindings:member'
      - 'excel!Excel.Workbook#calculationEngineVersion:member'
      - 'excel!Excel.Workbook#chartDataPointTrack:member'
      - 'excel!Excel.Workbook#comments:member'
      - 'excel!Excel.Workbook#customXmlParts:member'
      - 'excel!Excel.Workbook#dataConnections:member'
      - 'excel!Excel.Workbook#getActiveCell:member(1)'
      - 'excel!Excel.Workbook#getActiveChart:member(1)'
      - 'excel!Excel.Workbook#getActiveChartOrNullObject:member(1)'
      - 'excel!Excel.Workbook#getActiveSlicer:member(1)'
      - 'excel!Excel.Workbook#getActiveSlicerOrNullObject:member(1)'
      - 'excel!Excel.Workbook#getSelectedRange:member(1)'
      - 'excel!Excel.Workbook#getSelectedRanges:member(1)'
      - 'excel!Excel.Workbook#isDirty:member'
      - 'excel!Excel.Workbook#load:member(1)'
      - 'excel!Excel.Workbook#name:member'
      - 'excel!Excel.Workbook#names:member'
      - 'excel!Excel.Workbook#pivotTables:member'
      - 'excel!Excel.Workbook#pivotTableStyles:member'
      - 'excel!Excel.Workbook#previouslySaved:member'
      - 'excel!Excel.Workbook#properties:member'
      - 'excel!Excel.Workbook#protection:member'
      - 'excel!Excel.Workbook#readOnly:member'
      - 'excel!Excel.Workbook#slicers:member'
      - 'excel!Excel.Workbook#slicerStyles:member'
      - 'excel!Excel.Workbook#styles:member'
      - 'excel!Excel.Workbook#tables:member'
      - 'excel!Excel.Workbook#tableStyles:member'
      - 'excel!Excel.Workbook#timelineStyles:member'
      - 'excel!Excel.Workbook#usePrecisionAsDisplayed:member'
      - 'excel!Excel.Workbook#worksheets:member'
  - uid: 'excel!Excel.Workbook#application:member'
    summary: 'Представляет экземпляр приложения Excel, который содержит эту книгу.'
    name: application
    fullName: application
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly application: Application;'
      return:
        type:
          - 'excel!Excel.Application:interface'
  - uid: 'excel!Excel.Workbook#autoSave:member'
    summary: 'Указывает, находится ли книга в режиме автосохранения.'
    name: autoSave
    fullName: autoSave
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly autoSave: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#bindings:member'
    summary: 'Представляет коллекцию привязок, включенных в книгу.'
    name: bindings
    fullName: bindings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly bindings: BindingCollection;'
      return:
        type:
          - 'excel!Excel.BindingCollection:interface'
  - uid: 'excel!Excel.Workbook#calculationEngineVersion:member'
    summary: Возвращает номер версии модуля вычислений Excel.
    name: calculationEngineVersion
    fullName: calculationEngineVersion
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly calculationEngineVersion: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Workbook#chartDataPointTrack:member'
    summary: 'Значение true, если все диаграммы в книге отслеживают точки фактических данных, с которыми они связаны. False, если диаграммы отслеживают индекс точек данных.'
    name: chartDataPointTrack
    fullName: chartDataPointTrack
    langs:
      - typeScript
    type: property
    syntax:
      content: 'chartDataPointTrack: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#comments:member'
    summary: 'Представляет коллекцию примечаний, связанных с книгой.'
    name: comments
    fullName: comments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly comments: CommentCollection;'
      return:
        type:
          - 'excel!Excel.CommentCollection:interface'
  - uid: 'excel!Excel.Workbook#customXmlParts:member'
    summary: 'Представляет коллекцию настраиваемых XML-частей, которые содержит эта книга.'
    name: customXmlParts
    fullName: customXmlParts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly customXmlParts: CustomXmlPartCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection:interface'
  - uid: 'excel!Excel.Workbook#dataConnections:member'
    summary: Представляет все подключения к данным в книге.
    name: dataConnections
    fullName: dataConnections
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataConnections: DataConnectionCollection;'
      return:
        type:
          - 'excel!Excel.DataConnectionCollection:interface'
  - uid: 'excel!Excel.Workbook#getActiveCell:member(1)'
    summary: Получает текущую активную ячейку из книги.
    name: getActiveCell()
    fullName: getActiveCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveCell(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {

              let myWorkbook = context.workbook;
              let activeCell = myWorkbook.getActiveCell();
              activeCell.load("address");

              await context.sync();
              
              console.log("The active cell is " + activeCell.address);
          }
          ```
  - uid: 'excel!Excel.Workbook#getActiveChart:member(1)'
    summary: 'Получает текущую активную диаграмму в книге. Если нет активной диаграммы, `ItemNotFound` возникает исключение.'
    name: getActiveChart()
    fullName: getActiveChart()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveChart(): Chart;'
      return:
        type:
          - 'excel!Excel.Chart:interface'
        description: ''
  - uid: 'excel!Excel.Workbook#getActiveChartOrNullObject:member(1)'
    summary: 'Получает текущую активную диаграмму в книге. Если нет активной диаграммы, возвращается нулевой объект.'
    name: getActiveChartOrNullObject()
    fullName: getActiveChartOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveChartOrNullObject(): Chart;'
      return:
        type:
          - 'excel!Excel.Chart:interface'
        description: ''
  - uid: 'excel!Excel.Workbook#getActiveSlicer:member(1)'
    summary: 'Получает текущий активный срез в книге. Если активного среза нет, `ItemNotFound` создается исключение.'
    name: getActiveSlicer()
    fullName: getActiveSlicer()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveSlicer(): Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:interface'
        description: ''
  - uid: 'excel!Excel.Workbook#getActiveSlicerOrNullObject:member(1)'
    summary: 'Получает текущий активный срез в книге. Если активный срез отсутствует, возвращается пустой объект.'
    name: getActiveSlicerOrNullObject()
    fullName: getActiveSlicerOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveSlicerOrNullObject(): Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:interface'
        description: ''
  - uid: 'excel!Excel.Workbook#getSelectedRange:member(1)'
    summary: 'Получает текущий выделенный диапазон из книги. Если выбрано несколько диапазонов, этот метод выдаст ошибку.'
    name: getSelectedRange()
    fullName: getSelectedRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRange(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Workbook#getSelectedRanges:member(1)'
    summary: 'Получает текущий выделенный диапазон (один или несколько) в книге. В отличие от getSelectedRange() этот метод возвращает объект RangeAreas, представляющий все выделенные диапазоны.'
    name: getSelectedRanges()
    fullName: getSelectedRanges()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRanges(): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {

              let selectedRanges = context.workbook.getSelectedRanges();
              selectedRanges.format.fill.color = "lightblue";

              await context.sync();
          })
          ```
  - uid: 'excel!Excel.Workbook#isDirty:member'
    summary: 'Указывает, были ли внесены изменения с момента последнего сохранения книги. Для этого свойства можно задать значение true, если нужно закрыть измененную книгу без сохранения или выдачи запроса на сохранение.'
    name: isDirty
    fullName: isDirty
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isDirty: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#load:member(1)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. `context.sync()`Перед чтением свойств необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Workbook#name:member'
    summary: Получает имя книги.
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Workbook#names:member'
    summary: Представляет коллекцию именованных элементов в книге (именованные диапазоны и константы).
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: NamedItemCollection;'
      return:
        type:
          - 'excel!Excel.NamedItemCollection:interface'
  - uid: 'excel!Excel.Workbook#pivotTables:member'
    summary: 'Представляет коллекцию сводных таблиц, сопоставленных с книгой.'
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:interface'
  - uid: 'excel!Excel.Workbook#pivotTableStyles:member'
    summary: 'Представляет коллекцию объектов PivotTableStyles, связанных с книгой.'
    name: pivotTableStyles
    fullName: pivotTableStyles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTableStyles: PivotTableStyleCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableStyleCollection:interface'
  - uid: 'excel!Excel.Workbook#previouslySaved:member'
    summary: 'Указывает, была ли книга ранее сохранена локально или в сети.'
    name: previouslySaved
    fullName: previouslySaved
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly previouslySaved: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#properties:member'
    summary: Получает свойства книги.
    name: properties
    fullName: properties
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly properties: DocumentProperties;'
      return:
        type:
          - 'excel!Excel.DocumentProperties:interface'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let titleValue = "Excel document properties API";
              let subjectValue = "Set and get document properties";
              let keywordsValue = "Set and get operations";
              let commentsValue = "This is an Excel document properties API code sample";
              let categoryValue = "Office Add-ins";
              let managerValue = "John";
              let companyValue = "Microsoft";

              let docProperties = context.workbook.properties;

              // Set the writeable document properties.
              docProperties.title = titleValue;
              docProperties.subject = subjectValue;
              docProperties.keywords = keywordsValue;
              docProperties.comments = commentsValue;
              docProperties.category = categoryValue;
              docProperties.manager = managerValue;
              docProperties.company = companyValue;

              await context.sync();

              console.log("Set the following document properties: title, subject, keywords, comments, category, manager, company.");
          }
          ```
  - uid: 'excel!Excel.Workbook#protection:member'
    summary: Возвращает объект защиты для книги.
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: WorkbookProtection;'
      return:
        type:
          - 'excel!Excel.WorkbookProtection:interface'
  - uid: 'excel!Excel.Workbook#readOnly:member'
    summary: 'Значение true, если книга открыта в режиме только для чтения.'
    name: readOnly
    fullName: readOnly
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly readOnly: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#slicers:member'
    summary: 'Представляет коллекцию срезов, связанных с книгой.'
    name: slicers
    fullName: slicers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly slicers: SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:interface'
  - uid: 'excel!Excel.Workbook#slicerStyles:member'
    summary: 'Представляет коллекцию объектов SlicerStyles, связанных с книгой.'
    name: slicerStyles
    fullName: slicerStyles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly slicerStyles: SlicerStyleCollection;'
      return:
        type:
          - 'excel!Excel.SlicerStyleCollection:interface'
  - uid: 'excel!Excel.Workbook#styles:member'
    summary: 'Представляет коллекцию стилей, связанных с книгой.'
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly styles: StyleCollection;'
      return:
        type:
          - 'excel!Excel.StyleCollection:interface'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let styles = context.workbook.styles;

              // Add a new style to the style collection.
              // Styles is in the Home tab ribbon.
              styles.add("Diagonal Orientation Style");
                    
              let newStyle = styles.getItem("Diagonal Orientation Style");
              
              // The "Diagonal Orientation Style" properties.
              newStyle.textOrientation = 38;
              newStyle.autoIndent = true;
              newStyle.includeProtection = true;
              newStyle.shrinkToFit = true;
              newStyle.locked = false;
              
              await context.sync();

              console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
          }
          ```
  - uid: 'excel!Excel.Workbook#tables:member'
    summary: 'Представляет коллекцию таблиц, сопоставленных с книгой.'
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:interface'
  - uid: 'excel!Excel.Workbook#tableStyles:member'
    summary: 'Представляет коллекцию объектов TableStyles, связанных с книгой.'
    name: tableStyles
    fullName: tableStyles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tableStyles: TableStyleCollection;'
      return:
        type:
          - 'excel!Excel.TableStyleCollection:interface'
  - uid: 'excel!Excel.Workbook#timelineStyles:member'
    summary: 'Представляет коллекцию объектов TimelineStyles, связанных с книгой.'
    name: timelineStyles
    fullName: timelineStyles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly timelineStyles: TimelineStyleCollection;'
      return:
        type:
          - 'excel!Excel.TimelineStyleCollection:interface'
  - uid: 'excel!Excel.Workbook#usePrecisionAsDisplayed:member'
    summary: 'Значение true, если вычисления в книге выполняются только с той точностью чисел, с которой они отображаются. При переключении этого свойства с false на true данные будут безвозвратно потеряны.'
    name: usePrecisionAsDisplayed
    fullName: usePrecisionAsDisplayed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'usePrecisionAsDisplayed: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#worksheets:member'
    summary: 'Представляет коллекцию листов, сопоставленных с книгой.'
    name: worksheets
    fullName: worksheets
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheets: WorksheetCollection;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection:interface'
references:
  - uid: 'excel!Excel.Application:interface'
    name: Application
    fullName: Excel.Application
  - uid: 'excel!Excel.BindingCollection:interface'
    name: BindingCollection
    fullName: Excel.BindingCollection
  - uid: 'excel!Excel.CommentCollection:interface'
    name: CommentCollection
    fullName: Excel.CommentCollection
  - uid: 'excel!Excel.CustomXmlPartCollection:interface'
    name: CustomXmlPartCollection
    fullName: Excel.CustomXmlPartCollection
  - uid: 'excel!Excel.DataConnectionCollection:interface'
    name: DataConnectionCollection
    fullName: Excel.DataConnectionCollection
  - uid: 'excel!Excel.Range:interface'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.Chart:interface'
    name: Chart
    fullName: Excel.Chart
  - uid: 'excel!Excel.Slicer:interface'
    name: Slicer
    fullName: Excel.Slicer
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.NamedItemCollection:interface'
    name: NamedItemCollection
    fullName: Excel.NamedItemCollection
  - uid: 'excel!Excel.PivotTableCollection:interface'
    name: PivotTableCollection
    fullName: Excel.PivotTableCollection
  - uid: 'excel!Excel.PivotTableStyleCollection:interface'
    name: PivotTableStyleCollection
    fullName: Excel.PivotTableStyleCollection
  - uid: 'excel!Excel.DocumentProperties:interface'
    name: DocumentProperties
    fullName: Excel.DocumentProperties
  - uid: 'excel!Excel.WorkbookProtection:interface'
    name: WorkbookProtection
    fullName: Excel.WorkbookProtection
  - uid: 'excel!Excel.SlicerCollection:interface'
    name: SlicerCollection
    fullName: Excel.SlicerCollection
  - uid: 'excel!Excel.SlicerStyleCollection:interface'
    name: SlicerStyleCollection
    fullName: Excel.SlicerStyleCollection
  - uid: 'excel!Excel.StyleCollection:interface'
    name: StyleCollection
    fullName: Excel.StyleCollection
  - uid: 'excel!Excel.TableCollection:interface'
    name: TableCollection
    fullName: Excel.TableCollection
  - uid: 'excel!Excel.TableStyleCollection:interface'
    name: TableStyleCollection
    fullName: Excel.TableStyleCollection
  - uid: 'excel!Excel.TimelineStyleCollection:interface'
    name: TimelineStyleCollection
    fullName: Excel.TimelineStyleCollection
  - uid: 'excel!Excel.WorksheetCollection:interface'
    name: WorksheetCollection
    fullName: Excel.WorksheetCollection