### YamlMime:TSType
name: Excel.WorksheetCollection
uid: excel!Excel.WorksheetCollection:interface
package: excel!
fullName: Excel.WorksheetCollection
summary: Представляет коллекцию объектов листа, включенных в книгу.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: add(name)
  uid: excel!Excel.WorksheetCollection#add:member(1)
  package: excel!
  fullName: add(name)
  summary: Добавляет новый лист в книгу. Лист будет добавлен в конец набора имеющихся листов. Если вы хотите активировать только что добавленный лист, вызовите команду .activate().
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(name?: string): Worksheet;'
    parameters:
    - id: name
      description: Необязательный параметр. Имя добавляемого листа. Если параметр используется, имя должно быть уникальным. В противном случае Excel определяет имя нового листа.
      type: string
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getActiveWorksheet()
  uid: excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)
  package: excel!
  fullName: getActiveWorksheet()
  summary: Получает текущий активный лист в книге.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveWorksheet(): Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getCount(visibleOnly)
  uid: excel!Excel.WorksheetCollection#getCount:member(1)
  package: excel!
  fullName: getCount(visibleOnly)
  summary: Получает количество листов в коллекции.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(visibleOnly?: boolean): ClientResult<number>;'
    parameters:
    - id: visibleOnly
      description: Необязательный параметр. Если задано значение true, учитываются только видимые листы, пропуская все скрытые.
      type: boolean
    return:
      type: <xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;
      description: ''
- name: getFirst(visibleOnly)
  uid: excel!Excel.WorksheetCollection#getFirst:member(1)
  package: excel!
  fullName: getFirst(visibleOnly)
  summary: Получает первый лист в коллекции.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFirst(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Необязательный параметр. Если задано значение true, учитываются только видимые листы, пропуская все скрытые.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    let firstSheet = sheets.getFirst().getNext();\n    let lastSheet = sheets.getLast();\n    let firstTaxRateRange = firstSheet.getRange(\"B2\");\n    let lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n}\n```"
- name: getItem(key)
  uid: excel!Excel.WorksheetCollection#getItem:member(1)
  package: excel!
  fullName: getItem(key)
  summary: Получает объект листа по его имени или ИД.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(key: string): Worksheet;'
    parameters:
    - id: key
      description: Имя или ИД листа.
      type: string
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getItemOrNullObject(key)
  uid: excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)
  package: excel!
  fullName: getItemOrNullObject(key)
  summary: Получает объект листа по его имени или ИД. Если лист не существует, возвращает пустой объект.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemOrNullObject(key: string): Worksheet;'
    parameters:
    - id: key
      description: Имя или ИД листа.
      type: string
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getLast(visibleOnly)
  uid: excel!Excel.WorksheetCollection#getLast:member(1)
  package: excel!
  fullName: getLast(visibleOnly)
  summary: Получает последний лист в коллекции.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLast(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Необязательный параметр. Если задано значение true, учитываются только видимые листы, пропуская все скрытые.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    let firstSheet = sheets.getFirst().getNext();\n    let lastSheet = sheets.getLast();\n    let firstTaxRateRange = firstSheet.getRange(\"B2\");\n    let lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n}\n```"
- name: load(propertyNames)
  uid: excel!Excel.WorksheetCollection#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.
      type: string | string[]
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 61e5897d3f1e998cf0178cdd645dea173b17d823
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49418123"
