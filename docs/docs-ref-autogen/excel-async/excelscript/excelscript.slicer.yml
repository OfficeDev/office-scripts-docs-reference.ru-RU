### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Slicer:interface'
    summary: Представляет объект среза в книге.
    name: Excel.Slicer
    fullName: Excel.Slicer
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.Slicer#caption:member'
      - 'excel!Excel.Slicer#clearFilters:member(1)'
      - 'excel!Excel.Slicer#delete:member(1)'
      - 'excel!Excel.Slicer#getSelectedItems:member(1)'
      - 'excel!Excel.Slicer#height:member'
      - 'excel!Excel.Slicer#id:member'
      - 'excel!Excel.Slicer#isFilterCleared:member'
      - 'excel!Excel.Slicer#left:member'
      - 'excel!Excel.Slicer#load:member(1)'
      - 'excel!Excel.Slicer#name:member'
      - 'excel!Excel.Slicer#selectItems:member(1)'
      - 'excel!Excel.Slicer#slicerItems:member'
      - 'excel!Excel.Slicer#sortBy:member'
      - 'excel!Excel.Slicer#style:member'
      - 'excel!Excel.Slicer#top:member'
      - 'excel!Excel.Slicer#width:member'
      - 'excel!Excel.Slicer#worksheet:member'
  - uid: 'excel!Excel.Slicer#caption:member'
    summary: Представляет подпись среза.
    name: caption
    fullName: caption
    langs:
      - typeScript
    type: property
    syntax:
      content: 'caption: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Slicer#clearFilters:member(1)'
    summary: 'Удаляет все фильтры, примененные к срезу.'
    name: clearFilters()
    fullName: clearFilters()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearFilters(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let slicer = context.workbook.slicers.getItem("Fruit Slicer");
              slicer.clearFilters();
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Slicer#delete:member(1)'
    summary: Удаляет срез.
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.slicers.getItemAt(0).delete();
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Slicer#getSelectedItems:member(1)'
    summary: Возвращает массив имен выбранных ключей элементов.
    name: getSelectedItems()
    fullName: getSelectedItems()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedItems(): string[];'
      return:
        type:
          - 'string[]'
        description: ''
  - uid: 'excel!Excel.Slicer#height:member'
    summary: 'Представляет высоту среза (в пунктах). Создает исключение "аргумент является недопустимым или отсутствует или имеет неправильный формат". исключение, если задано отрицательное значение или ноль в качестве входных данных.'
    name: height
    fullName: height
    langs:
      - typeScript
    type: property
    syntax:
      content: 'height: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Slicer#id:member'
    summary: Представляет уникальный идентификатор среза.
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Slicer#isFilterCleared:member'
    summary: 'Значение true, если удалены все фильтры, примененные к срезу.'
    name: isFilterCleared
    fullName: isFilterCleared
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isFilterCleared: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Slicer#left:member'
    summary: 'Представляет расстояние в пунктах от левого края среза до левого края листа. Создает исключение "аргумент является недопустимым или отсутствует или имеет неправильный формат". исключение, если в качестве входных данных задано отрицательное значение.'
    name: left
    fullName: left
    langs:
      - typeScript
    type: property
    syntax:
      content: 'left: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Slicer#load:member(1)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. `context.sync()`Перед чтением свойств необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Slicer#name:member'
    summary: Представляет имя среза.
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Slicer#selectItems:member(1)'
    summary: 'Выбирает элементы срезов на основе их ключей. Предыдущие выбранные элементы очищаются. Все элементы будут выбраны по умолчанию, если массив пуст.'
    name: selectItems(items)
    fullName: selectItems(items)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'selectItems(items?: string[]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let slicer = context.workbook.slicers.getItem("Fruit Slicer");
              slicer.selectItems(["Lemon", "Lime", "Orange"]);
              await context.sync();
          }
          ```
      parameters:
        - id: items
          description: Необязательный параметр. Указанные имена выбранных элементов среза.
          type:
            - 'string[]'
  - uid: 'excel!Excel.Slicer#slicerItems:member'
    summary: 'Представляет коллекцию объектов SlicerItem, которые являются частью среза.'
    name: slicerItems
    fullName: slicerItems
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly slicerItems: SlicerItemCollection;'
      return:
        type:
          - 'excel!Excel.SlicerItemCollection:interface'
  - uid: 'excel!Excel.Slicer#sortBy:member'
    summary: 'Представляет порядок сортировки элементов в срезе. Возможные значения: "Датасаурцеордер", "Ascending", "Descending".'
    name: sortBy
    fullName: sortBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'sortBy: SlicerSortType;'
      return:
        type:
          - 'excel!Excel.SlicerSortType:enum'
  - uid: 'excel!Excel.Slicer#style:member'
    summary: 'Постоянное значение, представляющее стиль среза. Возможные значения: "SlicerStyleLight1", "SlicerStyleLight6", "TableStyleOther1", "TableStyleOther2", "SlicerStyleDark1" и "SlicerStyleDark6". Также можно указать настраиваемый пользовательский стиль, имеющийся в книге.'
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let slicer = context.workbook.slicers.getItem("Fruit Slicer");
              slicer.style = "SlicerStyleLight6";
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Slicer#top:member'
    summary: 'Представляет расстояние в пунктах от верхнего края среза до верхнего края листа. Создает исключение "аргумент является недопустимым или отсутствует или имеет неправильный формат". исключение, если в качестве входных данных задано отрицательное значение.'
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'top: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Slicer#width:member'
    summary: 'Представляет ширину среза (в пунктах). Создает исключение "аргумент является недопустимым или отсутствует или имеет неправильный формат". исключение, если задано отрицательное значение или ноль в качестве входных данных.'
    name: width
    fullName: width
    langs:
      - typeScript
    type: property
    syntax:
      content: 'width: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Slicer#worksheet:member'
    summary: 'Представляет лист, содержащий срез.'
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
references:
  - uid: 'excel!Excel.SlicerItemCollection:interface'
    name: SlicerItemCollection
    fullName: Excel.SlicerItemCollection
  - uid: 'excel!Excel.SlicerSortType:enum'
    name: SlicerSortType
    fullName: Excel.SlicerSortType
  - uid: 'excel!Excel.Worksheet:interface'
    name: Worksheet
    fullName: Excel.Worksheet