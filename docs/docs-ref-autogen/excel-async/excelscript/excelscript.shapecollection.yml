### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ShapeCollection:interface'
    summary: Представляет коллекцию всех фигур в рабочем листе.
    name: Excel.ShapeCollection
    fullName: Excel.ShapeCollection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.ShapeCollection#addGeometricShape:member(1)'
      - 'excel!Excel.ShapeCollection#addGroup:member(1)'
      - 'excel!Excel.ShapeCollection#addImage:member(1)'
      - 'excel!Excel.ShapeCollection#addLine:member(1)'
      - 'excel!Excel.ShapeCollection#addTextBox:member(1)'
      - 'excel!Excel.ShapeCollection#getItem:member(1)'
      - 'excel!Excel.ShapeCollection#load:member(1)'
  - uid: 'excel!Excel.ShapeCollection#addGeometricShape:member(1)'
    summary: 'Добавляет геометрическую фигуру на лист. Возвращает объект Shape, представляющий новую фигуру.'
    name: addGeometricShape(geometricShapeType)
    fullName: addGeometricShape(geometricShapeType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addGeometricShape(geometricShapeType: GeometricShapeType): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.hexagon);
              shape.left = 5;
              shape.top = 5;
              shape.height = 175;
              shape.width = 200;
              await context.sync();
          }
          ```
      parameters:
        - id: geometricShapeType
          description: Представляет тип геометрической фигуры. Дополнительные сведения см. в статье Excel.GeometricShapeType.
          type:
            - 'excel!Excel.GeometricShapeType:enum'
  - uid: 'excel!Excel.ShapeCollection#addGroup:member(1)'
    summary: 'Группирует подмножество фигур на листе этой коллекции. Возвращает объект Shape, представляющий новую группу фигур.'
    name: addGroup(values)
    fullName: addGroup(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addGroup(values: Array<string | Shape>): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let square = sheet.shapes.getItem("Square");
              let pentagon = sheet.shapes.getItem("Pentagon");
              let octagon = sheet.shapes.getItem("Octagon");

              let shapeGroup = sheet.shapes.addGroup([square, pentagon, octagon]);
              shapeGroup.name = "Group";
              console.log("Shapes grouped");

              await context.sync();
          }
          ```
      parameters:
        - id: values
          description: Массив ИДЕНТИФИКАТОРов фигуры или объектов Shape.
          type:
            - 'excel!Excel.ShapeCollection#addGroup~0:complex'
  - uid: 'excel!Excel.ShapeCollection#addImage:member(1)'
    summary: 'Создает изображение из строки в кодировке base64 и добавляет его на лист. Возвращает объект Shape, представляющий новое изображение.'
    name: addImage(base64ImageString)
    fullName: addImage(base64ImageString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addImage(base64ImageString: string): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          let myFile = <HTMLInputElement>document.getElementById("selectedFile");
          let reader = new FileReader();

          reader.onload = (event) => {
              Excel.run((context) => {
                  let startIndex = reader.result.toString().indexOf("base64,");
                  let mybase64 = reader.result.toString().substr(startIndex + 7);
                  let sheet = context.workbook.worksheets.getItem("Shapes");
                  let image = sheet.shapes.addImage(mybase64);
                  image.name = "Image";
                  return context.sync();
              });
          };

          // Read in the image file as a data URL.
          reader.readAsDataURL(myFile.files[0]);
          ```
      parameters:
        - id: base64ImageString
          description: 'Строка в кодировке Base64, представляющая изображение в формате JPEG или PNG.'
          type:
            - string
  - uid: 'excel!Excel.ShapeCollection#addLine:member(1)'
    summary: 'Добавляет линию на лист. Возвращает объект Shape, представляющий новую линию.'
    name: 'addLine(startLeft, startTop, endLeft, endTop, connectorType)'
    fullName: 'addLine(startLeft, startTop, endLeft, endTop, connectorType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addLine(
                    startLeft: number,
                    startTop: number,
                    endLeft: number,
                    endTop: number,
                    connectorType?: ConnectorType
                ): Shape;
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
              let line = shapes.addLine(200, 50, 300, 150, Excel.ConnectorType.straight);
              line.name = "StraightLine";
              await context.sync();
          }
          ```
      parameters:
        - id: startLeft
          description: Расстояние от начала линии до левого края листа (в пунктах).
          type:
            - number
        - id: startTop
          description: Расстояние (в пунктах) от начала линии до верхней границы листа.
          type:
            - number
        - id: endLeft
          description: Расстояние в пунктах от конца строки до левого края листа.
          type:
            - number
        - id: endTop
          description: Расстояние в пунктах от конца линии до верхней границы листа.
          type:
            - number
        - id: connectorType
          description: Представляет тип соединителя. Дополнительные сведения см. в статье Excel. Коннектортипе.
          type:
            - 'excel!Excel.ConnectorType:enum'
  - uid: 'excel!Excel.ShapeCollection#addTextBox:member(1)'
    summary: 'Добавляет текстовое поле на лист с указанным текстом в качестве содержимого. Возвращает объект Shape, представляющий новое текстовое поле.'
    name: addTextBox(text)
    fullName: addTextBox(text)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTextBox(text?: string): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
              let textbox = shapes.addTextBox("A box with text");
              textbox.left = 100;
              textbox.top = 100;
              textbox.height = 20;
              textbox.width = 175;
              textbox.name = "Textbox";
              await context.sync();
          }
          ```
      parameters:
        - id: text
          description: 'Представляет текст, который будет отображаться в созданном текстовом поле.'
          type:
            - string
  - uid: 'excel!Excel.ShapeCollection#getItem:member(1)'
    summary: Получает фигуру по имени или идентификатору.
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: ''
      parameters:
        - id: key
          description: Имя или Идентификатор извлекаемой фигуры.
          type:
            - string
  - uid: 'excel!Excel.ShapeCollection#load:member(1)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. `context.sync()`Перед чтением свойств необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.Shape:interface'
    name: Shape
    fullName: Excel.Shape
  - uid: 'excel!Excel.GeometricShapeType:enum'
    name: GeometricShapeType
    fullName: Excel.GeometricShapeType
  - uid: 'excel!Excel.ShapeCollection#addGroup~0:complex'
    name: Array<string | Shape>
    fullName: Array<string | Excel.Shape>
    spec.typeScript:
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: '<string | '
        fullName: '<string | '
      - uid: 'excel!Excel.Shape:interface'
        name: Shape
        fullName: Excel.Shape
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.ConnectorType:enum'
    name: ConnectorType
    fullName: Excel.ConnectorType