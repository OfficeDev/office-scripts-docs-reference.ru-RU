### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.PageLayout:interface'
    summary: 'Представляет параметры макета и печати, которые не зависят от конкретной реализации принтера. Эти параметры включают поля, ориентацию, нумерацию страницы, строки заголовков и область печати.'
    name: Excel.PageLayout
    fullName: Excel.PageLayout
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.PageLayout#blackAndWhite:member'
      - 'excel!Excel.PageLayout#bottomMargin:member'
      - 'excel!Excel.PageLayout#centerHorizontally:member'
      - 'excel!Excel.PageLayout#centerVertically:member'
      - 'excel!Excel.PageLayout#draftMode:member'
      - 'excel!Excel.PageLayout#firstPageNumber:member'
      - 'excel!Excel.PageLayout#footerMargin:member'
      - 'excel!Excel.PageLayout#getPrintAreaOrNullObject:member(1)'
      - 'excel!Excel.PageLayout#getPrintTitleColumnsOrNullObject:member(1)'
      - 'excel!Excel.PageLayout#getPrintTitleRowsOrNullObject:member(1)'
      - 'excel!Excel.PageLayout#headerMargin:member'
      - 'excel!Excel.PageLayout#headersFooters:member'
      - 'excel!Excel.PageLayout#leftMargin:member'
      - 'excel!Excel.PageLayout#load:member(1)'
      - 'excel!Excel.PageLayout#orientation:member'
      - 'excel!Excel.PageLayout#paperSize:member'
      - 'excel!Excel.PageLayout#printComments:member'
      - 'excel!Excel.PageLayout#printErrors:member'
      - 'excel!Excel.PageLayout#printGridlines:member'
      - 'excel!Excel.PageLayout#printHeadings:member'
      - 'excel!Excel.PageLayout#printOrder:member'
      - 'excel!Excel.PageLayout#rightMargin:member'
      - 'excel!Excel.PageLayout#setPrintArea:member(1)'
      - 'excel!Excel.PageLayout#setPrintMargins:member(1)'
      - 'excel!Excel.PageLayout#setPrintTitleColumns:member(1)'
      - 'excel!Excel.PageLayout#setPrintTitleRows:member(1)'
      - 'excel!Excel.PageLayout#topMargin:member'
      - 'excel!Excel.PageLayout#zoom:member'
  - uid: 'excel!Excel.PageLayout#blackAndWhite:member'
    summary: Параметр печати "черно-белый" на листе.
    name: blackAndWhite
    fullName: blackAndWhite
    langs:
      - typeScript
    type: property
    syntax:
      content: 'blackAndWhite: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.PageLayout#bottomMargin:member'
    summary: 'Нижнее поле страницы листа, которое будет использоваться для печати в точках.'
    name: bottomMargin
    fullName: bottomMargin
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bottomMargin: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.PageLayout#centerHorizontally:member'
    summary: 'Флаг горизонтального центрирования листа. Эта отметка определяет, выравнивается ли лист по горизонтали относительно центра при печати.'
    name: centerHorizontally
    fullName: centerHorizontally
    langs:
      - typeScript
    type: property
    syntax:
      content: 'centerHorizontally: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.centerHorizontally = true;
              farmSheet.pageLayout.centerVertically = true;
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.PageLayout#centerVertically:member'
    summary: 'Вертикальный флаг в центре листа. Эта отметка определяет, выравнивается ли лист по вертикали относительно центра при печати.'
    name: centerVertically
    fullName: centerVertically
    langs:
      - typeScript
    type: property
    syntax:
      content: 'centerVertically: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.centerHorizontally = true;
              farmSheet.pageLayout.centerVertically = true;
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.PageLayout#draftMode:member'
    summary: 'Режим черновика листа. Если присвоено значение true, лист будет печататься без рисунков.'
    name: draftMode
    fullName: draftMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'draftMode: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.PageLayout#firstPageNumber:member'
    summary: 'Номер первой страницы листа, который требуется напечатать. Значение null представляет автоматическую нумерацию страниц.'
    name: firstPageNumber
    fullName: firstPageNumber
    langs:
      - typeScript
    type: property
    syntax:
      content: 'firstPageNumber: number | "";'
      return:
        type:
          - number | ""
  - uid: 'excel!Excel.PageLayout#footerMargin:member'
    summary: 'Поле нижнего колонтитула листа в пунктах, которое будет использоваться при печати.'
    name: footerMargin
    fullName: footerMargin
    langs:
      - typeScript
    type: property
    syntax:
      content: 'footerMargin: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.PageLayout#getPrintAreaOrNullObject:member(1)'
    summary: 'Получает объект RangeAreas, состоящий из одного или нескольких прямоугольных диапазонов, представляющих область печати для листа. Если область печати отсутствует, возвращается пустой объект.'
    name: getPrintAreaOrNullObject()
    fullName: getPrintAreaOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrintAreaOrNullObject(): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
  - uid: 'excel!Excel.PageLayout#getPrintTitleColumnsOrNullObject:member(1)'
    summary: 'Получает объект range, представляющий столбцы заголовков. Если значение не установлено, возвращается пустой объект.'
    name: getPrintTitleColumnsOrNullObject()
    fullName: getPrintTitleColumnsOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrintTitleColumnsOrNullObject(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.PageLayout#getPrintTitleRowsOrNullObject:member(1)'
    summary: 'Получает объект range, представляющий строки заголовков. Если значение не установлено, возвращается пустой объект.'
    name: getPrintTitleRowsOrNullObject()
    fullName: getPrintTitleRowsOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrintTitleRowsOrNullObject(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.PageLayout#headerMargin:member'
    summary: 'Поле заголовка листа (в пунктах), используемое при печати.'
    name: headerMargin
    fullName: headerMargin
    langs:
      - typeScript
    type: property
    syntax:
      content: 'headerMargin: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.PageLayout#headersFooters:member'
    summary: Настройка колонтитулов для листа.
    name: headersFooters
    fullName: headersFooters
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly headersFooters: HeaderFooterGroup;'
      return:
        type:
          - 'excel!Excel.HeaderFooterGroup:interface'
  - uid: 'excel!Excel.PageLayout#leftMargin:member'
    summary: 'Левое поле листа (в пунктах), которое будет использоваться при печати.'
    name: leftMargin
    fullName: leftMargin
    langs:
      - typeScript
    type: property
    syntax:
      content: 'leftMargin: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.PageLayout#load:member(1)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. `context.sync()`Перед чтением свойств необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.PageLayout#orientation:member'
    summary: Ориентация страницы на листе.
    name: orientation
    fullName: orientation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'orientation: PageOrientation;'
      return:
        type:
          - 'excel!Excel.PageOrientation:enum'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.orientation = Excel.PageOrientation.landscape;
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.PageLayout#paperSize:member'
    summary: Размер бумаги страницы на листе.
    name: paperSize
    fullName: paperSize
    langs:
      - typeScript
    type: property
    syntax:
      content: 'paperSize: PaperType;'
      return:
        type:
          - 'excel!Excel.PaperType:enum'
  - uid: 'excel!Excel.PageLayout#printComments:member'
    summary: 'Указывает, следует ли отображать комментарии листа при печати.'
    name: printComments
    fullName: printComments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'printComments: PrintComments;'
      return:
        type:
          - 'excel!Excel.PrintComments:enum'
  - uid: 'excel!Excel.PageLayout#printErrors:member'
    summary: Параметр "ошибки печати листа".
    name: printErrors
    fullName: printErrors
    langs:
      - typeScript
    type: property
    syntax:
      content: 'printErrors: PrintErrorType;'
      return:
        type:
          - 'excel!Excel.PrintErrorType:enum'
  - uid: 'excel!Excel.PageLayout#printGridlines:member'
    summary: 'Указывает, будут ли печататься линии сетки листа.'
    name: printGridlines
    fullName: printGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'printGridlines: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.PageLayout#printHeadings:member'
    summary: 'Указывает, будут ли печататься заголовки листа.'
    name: printHeadings
    fullName: printHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'printHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.PageLayout#printOrder:member'
    summary: 'Параметр порядка печати на странице листа. Определяет порядок, использующийся при обработке распечатываемых номеров страниц.'
    name: printOrder
    fullName: printOrder
    langs:
      - typeScript
    type: property
    syntax:
      content: 'printOrder: PrintOrder;'
      return:
        type:
          - 'excel!Excel.PrintOrder:enum'
  - uid: 'excel!Excel.PageLayout#rightMargin:member'
    summary: 'Правое поле листа (в пунктах), используемое при печати.'
    name: rightMargin
    fullName: rightMargin
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rightMargin: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.PageLayout#setPrintArea:member(1)'
    summary: Задает область печати листа.
    name: setPrintArea(printArea)
    fullName: setPrintArea(printArea)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPrintArea(printArea: Range | RangeAreas | string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.setPrintArea("A1:D41");
              await context.sync();
          }
          ```
      parameters:
        - id: printArea
          description: Диапазон или RangeAreas контента для печати.
          type:
            - 'excel!Excel.PageLayout#setPrintArea~0:complex'
  - uid: 'excel!Excel.PageLayout#setPrintMargins:member(1)'
    summary: Задает поля страницы с единицами измерения для листа.
    name: 'setPrintMargins(unit, marginOptions)'
    fullName: 'setPrintMargins(unit, marginOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        setPrintMargins(
                    unit: PrintMarginUnit,
                    marginOptions: PageLayoutMarginOptions
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: unit
          description: Единица измерения для предоставленных полей.
          type:
            - 'excel!Excel.PrintMarginUnit:enum'
        - id: marginOptions
          description: 'Значения полей, которые необходимо задать, поля, не поддерживаемые, останутся без изменений.'
          type:
            - 'excel!Excel.PageLayoutMarginOptions:interface'
  - uid: 'excel!Excel.PageLayout#setPrintTitleColumns:member(1)'
    summary: 'Задает столбцы, содержащие ячейки, которые должны повторяться слева на каждой странице при печати листа.'
    name: setPrintTitleColumns(printTitleColumns)
    fullName: setPrintTitleColumns(printTitleColumns)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPrintTitleColumns(printTitleColumns: Range | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: printTitleColumns
          description: 'Столбцы, которые должны повторяться слева от каждой страницы, должны охватывать весь столбец как допустимый.'
          type:
            - 'excel!Excel.PageLayout#setPrintTitleColumns~0:complex'
  - uid: 'excel!Excel.PageLayout#setPrintTitleRows:member(1)'
    summary: 'Задает строки, содержащие ячейки, которые должны повторяться сверху каждой страницы при печати листа.'
    name: setPrintTitleRows(printTitleRows)
    fullName: setPrintTitleRows(printTitleRows)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPrintTitleRows(printTitleRows: Range | string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.setPrintTitleRows("$1:$1");
              await context.sync();
          }
          ```
      parameters:
        - id: printTitleRows
          description: 'Строки, которые будут повторяться в верхней части каждой страницы, диапазон должны охватывать всю строку как допустимую.'
          type:
            - 'excel!Excel.PageLayout#setPrintTitleRows~0:complex'
  - uid: 'excel!Excel.PageLayout#topMargin:member'
    summary: 'Верхнее поле листа (в пунктах), которое будет использоваться при печати.'
    name: topMargin
    fullName: topMargin
    langs:
      - typeScript
    type: property
    syntax:
      content: 'topMargin: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.PageLayout#zoom:member'
    summary: 'Параметры масштаба листа для печати. `PageLayoutZoomOptions`Объект должен быть задан как объект JSON (используйте `x.zoom = {...}` вместо`x.zoom.scale = ...`<!-- -->).'
    name: zoom
    fullName: zoom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'zoom: PageLayoutZoomOptions;'
      return:
        type:
          - 'excel!Excel.PageLayoutZoomOptions:interface'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.zoom = { scale: 200 };
              await context.sync();
          }
          ```
references:
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.Range:interface'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.HeaderFooterGroup:interface'
    name: HeaderFooterGroup
    fullName: Excel.HeaderFooterGroup
  - uid: 'excel!Excel.PageOrientation:enum'
    name: PageOrientation
    fullName: Excel.PageOrientation
  - uid: 'excel!Excel.PaperType:enum'
    name: PaperType
    fullName: Excel.PaperType
  - uid: 'excel!Excel.PrintComments:enum'
    name: PrintComments
    fullName: Excel.PrintComments
  - uid: 'excel!Excel.PrintErrorType:enum'
    name: PrintErrorType
    fullName: Excel.PrintErrorType
  - uid: 'excel!Excel.PrintOrder:enum'
    name: PrintOrder
    fullName: Excel.PrintOrder
  - uid: 'excel!Excel.PageLayout#setPrintArea~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:interface'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.PrintMarginUnit:enum'
    name: PrintMarginUnit
    fullName: Excel.PrintMarginUnit
  - uid: 'excel!Excel.PageLayoutMarginOptions:interface'
    name: PageLayoutMarginOptions
    fullName: Excel.PageLayoutMarginOptions
  - uid: 'excel!Excel.PageLayout#setPrintTitleColumns~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.PageLayout#setPrintTitleRows~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.PageLayoutZoomOptions:interface'
    name: PageLayoutZoomOptions
    fullName: Excel.PageLayoutZoomOptions